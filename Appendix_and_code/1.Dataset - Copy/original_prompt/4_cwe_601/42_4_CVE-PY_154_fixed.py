import logging
from gluon import *


Table = DAL.Table
Field = DAL.Field

__all__ = ['Mail', 'Auth', 'Recaptcha2', 'Crud', 'Service', 'Wiki',
           'PluginManager', 'fetch', 'geocode', 'reverse_geocode', 'prettydate']

# mind there are two loggers here (logger and crud.settings.logger)!
logger = logging.getLogger("web2py")

DEFAULT = lambda: None


def delete(self,
           table,
           record_id,
           next=DEFAULT,
           message=DEFAULT,
           ):
    if not (isinstance(table, Table) or table in self.db.tables):
        raise HTTP(404)
    if not isinstance(table, Table):
        table = self.db[table]
    if not self.has_permission('delete', table, record_id):
        redirect(self.settings.auth.settings.on_failed_authorization)
    request = current.request
    session = current.session
    if next is DEFAULT:
# fixed
        next = prevent_open_redirect(request.get_vars._next) \
               or prevent_open_redirect(request.post_vars._next) \
               or self.settings.delete_next
# fixed
    if message is DEFAULT:
        message = self.messages.record_deleted
    record = table[record_id]
    if record:
        callback(self.settings.delete_onvalidation, record)
        del table[record_id]
        callback(self.settings.delete_onaccept, record, table._tablename)
        session.flash = message
    redirect(next)