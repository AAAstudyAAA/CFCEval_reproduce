
from django.contrib.auth.decorators import login_required
from django.contrib.auth import get_user_model
from django.views.decorators.http import require_POST
from django.contrib import messages
from spirit.core import utils
from spirit.core.utils.http import safe_redirect
from spirit.core.utils.views import is_post, post_data
from .utils import notify_access
from .models import TopicPrivate
from .forms import (
    TopicPrivateManyForm, TopicForPrivateForm,
    TopicPrivateJoinForm, TopicPrivateInviteForm)

User = get_user_model()

@login_required
@require_POST
def create_access(request, topic_id):
    topic_private = TopicPrivate.objects.for_create_or_404(topic_id, request.user)
    form = TopicPrivateInviteForm(
        topic=topic_private.topic,
        data=post_data(request))

    if form.is_valid():
        form.save()
        notify_access(user=form.get_user(), topic_private=topic_private)
    else:
        messages.error(request, utils.render_form_errors(form))
# co_Fixed
    return safe_redirect(request, topic_private.get_absolute_url())
# co_fixed