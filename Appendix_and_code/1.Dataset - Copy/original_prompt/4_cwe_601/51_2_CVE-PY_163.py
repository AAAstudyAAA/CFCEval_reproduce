"""Django Views for the termsandconditions module"""
import logging
from urllib.parse import urlparse

from django.conf import settings
# pylint: disable=E1120,R0901,R0904
from django.contrib.auth.models import User
from django.db import IntegrityError
from django.http import HttpResponseRedirect

from .models import TermsAndConditions, UserTermsAndConditions

LOGGER = logging.getLogger(name="termsandconditions")
DEFAULT_TERMS_BASE_TEMPLATE = "base.html"
DEFAULT_TERMS_IP_HEADER_NAME = "REMOTE_ADDR"


def post(self, request, *args, **kwargs):
    """
    Handles POST request.
    """
# vulnerable
    return_url = request.POST.get("returnTo", "/")
# vulnerable

    terms_ids = request.POST.getlist("terms")

    parsed = urlparse(return_url)
    if parsed.hostname and parsed.hostname not in settings.ALLOWED_HOSTS:
        # Make sure the return url is a relative path or a trusted hostname
        return_url = '/'

    if not terms_ids:  # pragma: nocover
        return HttpResponseRedirect(return_url)

    if request.user.is_authenticated:
        user = request.user
    else:
        # Get user out of saved pipeline from django-socialauth
        if "partial_pipeline" in request.session:
            user_pk = request.session["partial_pipeline"]["kwargs"]["user"]["pk"]
            user = User.objects.get(id=user_pk)
        else:
            return HttpResponseRedirect("/")

    store_ip_address = getattr(settings, "TERMS_STORE_IP_ADDRESS", True)
    if store_ip_address:
        ip_address = request.META.get(
            getattr(settings, "TERMS_IP_HEADER_NAME", DEFAULT_TERMS_IP_HEADER_NAME)
        )
        if "," in ip_address:
            ip_address = ip_address.split(",")[0].strip()
    else:
        ip_address = ""

    for terms_id in terms_ids:
        try:
            new_user_terms = UserTermsAndConditions(
                user=user,
                terms=TermsAndConditions.objects.get(pk=int(terms_id)),
                ip_address=ip_address,
            )
            new_user_terms.save()
        except IntegrityError:  # pragma: nocover
            pass

    return HttpResponseRedirect(return_url)