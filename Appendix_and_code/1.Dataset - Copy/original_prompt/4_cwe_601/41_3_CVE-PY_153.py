def update(self,
           table,
           record,
           next=DEFAULT,
           onvalidation=DEFAULT,
           onaccept=DEFAULT,
           ondelete=DEFAULT,
           log=DEFAULT,
           message=DEFAULT,
           deletable=DEFAULT,
           formname=DEFAULT,
           **attributes
           ):
    if not (isinstance(table, Table) or table in self.db.tables) \
            or (isinstance(record, str) and not str(record).isdigit()):
        raise HTTP(404)
    if not isinstance(table, Table):
        table = self.db[table]
    try:
        record_id = record.id
    except:
        record_id = record or 0
    if record_id and not self.has_permission('update', table, record_id):
        redirect(self.settings.auth.settings.on_failed_authorization)
    if not record_id and not self.has_permission('create', table, record_id):
        redirect(self.settings.auth.settings.on_failed_authorization)

    request = current.request
    response = current.response
    session = current.session
    if request.extension == 'json' and request.vars.json:
        request.vars.update(json.loads(request.vars.json))
#   vulnerable
    if next is DEFAULT:
        next = prevent_open_redirect(request.get_vars._next) \
               or prevent_open_redirect(request.post_vars._next) \
               or self.settings.update_next
#   vulnerable
    if onvalidation is DEFAULT:
        onvalidation = self.settings.update_onvalidation
    if onaccept is DEFAULT:
        onaccept = self.settings.update_onaccept
    if ondelete is DEFAULT:
        ondelete = self.settings.update_ondelete
    if log is DEFAULT:
        log = self.messages['update_log']
    if deletable is DEFAULT:
        deletable = self.settings.update_deletable
    if message is DEFAULT:
        message = self.messages.record_updated
    if 'hidden' not in attributes:
        attributes['hidden'] = {}