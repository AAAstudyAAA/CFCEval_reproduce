
from django.contrib.auth.decorators import login_required
from django.urls import reverse
from django.contrib.auth import get_user_model
from django.shortcuts import render, redirect, get_object_or_404
from django.views.decorators.http import require_POST
from django.contrib import messages
from django.http import HttpResponsePermanentRedirect
from djconfig import config
from spirit.core import utils
from spirit.core.utils.http import safe_redirect
from spirit.core.utils.views import is_post, post_data
from spirit.core.utils.paginator import paginate, yt_paginate
from spirit.core.utils.ratelimit.decorators import ratelimit
from spirit.comment.forms import CommentForm
from spirit.comment.utils import comment_posted
from spirit.comment.models import Comment
from ..utils import topic_viewed
from .utils import notify_access
from .models import TopicPrivate
from .forms import (
    TopicPrivateManyForm, TopicForPrivateForm,
    TopicPrivateJoinForm, TopicPrivateInviteForm)
from ..notification.models import TopicNotification

User = get_user_model()


@login_required
def delete_access(request, pk):
    topic_private = TopicPrivate.objects.for_delete_or_404(pk, request.user)

    if request.method == 'POST':
        topic_private.delete()

        if request.user.pk == topic_private.user_id:
            return redirect(reverse("spirit:topic:private:index"))


#fixed
        return safe_redirect(
            request, 'next', topic_private.get_absolute_url(), method='POST')
#fixed



    return render(
        request=request,
        template_name='spirit/topic/private/delete.html',
        context={'topic_private': topic_private})
