from typing import Any, Callable, List, Optional, cast
from urllib.parse import urlparse

from django.conf import settings
from django.http import HttpRequest, HttpResponse
from django.urls import URLPattern, include, path, re_path
from django.views.decorators import csrf
from django.views.decorators.csrf import csrf_exempt
from drf_spectacular.views import SpectacularAPIView, SpectacularRedocView, SpectacularSwaggerView

from posthog.api import (
    api_not_found,
    authentication,
    capture,
    dashboard,
    decide,
    organizations_router,
    project_dashboards_router,
    projects_router,
    router,
    signup,
    user,
)
from posthog.api.decide import hostname_in_app_urls
from posthog.demo import demo
from posthog.models import User

from .utils import render_template
from .views import health, login_required, preflight_check, robots_txt, security_txt, sso_login, stats

ee_urlpatterns: List[Any] = []
try:
    from ee.urls import extend_api_router
    from ee.urls import urlpatterns as ee_urlpatterns
except ImportError:
    pass
else:
    extend_api_router(router, projects_router=projects_router, project_dashboards_router=project_dashboards_router)


try:
    # See https://github.com/PostHog/posthog-cloud/blob/master/multi_tenancy/router.py
    from multi_tenancy.router import extend_api_router as extend_api_router_cloud  # noqa
except ImportError:
    pass
else:
    extend_api_router_cloud(router, organizations_router=organizations_router, projects_router=projects_router)


@csrf.ensure_csrf_cookie
def home(request, *args, **kwargs):
    return render_template("index.html", request)


def authorize_and_redirect(request: HttpRequest) -> HttpResponse:
    if not request.GET.get("redirect"):
        return HttpResponse("You need to pass a url to ?redirect=", status=401)
    if not request.META.get("HTTP_REFERER"):
        return HttpResponse('You need to make a request that includes the "Referer" header.', status=400)


    current_team = cast(User, request.user).team

    referer_url = urlparse(request.META["HTTP_REFERER"])
    redirect_url = urlparse(request.GET["redirect"])

   # the following code is for fixing the vulnerability CWE-601 (Open Redirect)
    if referer_url.netloc == redirect_url.netloc and hostname_in_app_urls(referer_url.netloc, current_team):
        return redirect(request.GET