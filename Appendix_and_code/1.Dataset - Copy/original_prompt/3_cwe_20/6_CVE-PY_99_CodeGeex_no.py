import hashlib
import logging
import os.path
import uuid
from collections import defaultdict
from datetime import date, timedelta
from typing import List, Mapping, Optional, Tuple

from django.core.files.base import File
from django.db import models
from django.utils import timezone
from django.utils.translation import gettext_lazy as _

from glom import glom
from privates.fields import PrivateMediaFileField

from openforms.utils.files import DeleteFileFieldFilesMixin, DeleteFilesQuerySetMixin

from .submission import Submission
from .submission_step import SubmissionStep

logger = logging.getLogger(__name__)








class SubmissionFileAttachmentManager(models.Manager):
    def create_from_upload(
            self,
            submission_step: SubmissionStep,
            form_key: str,
            upload: TemporaryFileUpload,
            file_name: Optional[str] = None,
    ) -> Tuple["SubmissionFileAttachment", bool]:
        try:
            return (
                self.get(
                    submission_step=submission_step,
                    temporary_file=upload,
                    form_key=form_key,
                ),
                False,
            )
        except self.model.DoesNotExist:
            # coge
            # file not yet attached, create a new one
            return (
                self.create(
                    submission_step=submission_step,
                    temporary_file=upload,
                    form_key=form_key,
                    file_name=file_name or upload.upload_name,
                ),
                True,
            )
# coge