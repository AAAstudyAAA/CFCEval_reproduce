import argparse
import os
import sys

import requests

from .utils import Paginator, dynamic_bars, get_key_value, split_comma_separated
from .url import build_URL_from_type, smart_select_url
from ..network import Net, base_url
from ..main import get_followed_list_from_user_library, get_list_from_user, get_list_from_user_library, search, get_manga_from_user_library
from ..utils import (
    validate_url as __validate,
    validate_legacy_url,
    input_handle
)
from ..group import Group
from ..manga import ContentRating, Manga
from ..errors import InvalidURL, MangaDexException, PillowNotInstalled



def validate(parser, args):
    urls = args.URL

    if (
            not args.search and
            not args.fetch_library_manga and
            not args.fetch_library_list and
            not args.fetch_library_follows_list and
            not args.random and
            not args.fetch_group
    ):
        # Parsing file path
        if args.file:
            result = urls.split(':')
            file = result[1:]
            file_path = ""
            err_file = False

            try:
                file_path += file.pop(0)
            except IndexError:
                err_file = True

            if not file_path:
                err_file = True

            if err_file:
                parser.error("Syntax error: file path argument is empty")

            # Because ":" was removed during .split()
            # add it again
            for f in file:
                file_path += ':' + f

            # web URL location support for "file:{location}" syntax
            if file_path.startswith('http://') or file_path.startswith('https://'):
                r = Net.requests.get(file_path)
                try:
                    r.raise_for_status()
                except requests.HTTPError:
                    raise MangaDexException(f"Failed to connect '{file_path}', status code = {r.status_code}")

                file_path = r.text

            # Because this is specified syntax for batch downloading
            # If file doesn't exist, raise error
            elif not os.path.exists(file_path):
                parser.error(f"File \"{file_path}\" is not exist")
        else:
            # the following code is for fixing the vulnerability CWE-20 (Improper Input Validation)