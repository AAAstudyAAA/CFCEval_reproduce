import base64
import binascii
import hashlib
import os
import re
import sys
import tempfile
import threading
import time
import typing
import zlib
import codecs
from distutils.version import StrictVersion

from cryptography import exceptions as crypto_exceptions
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization as crypto_serialization
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography import x509

from keylime import cmd_exec
from keylime import config
from keylime import json
from keylime import keylime_logging
from keylime import secure_mount
from keylime.tpm import tpm_abstract
from keylime import tpm_ek_ca
from keylime.common import algorithms
from keylime.tpm import tpm2_objects
from keylime.failure import Failure, Component

logger = keylime_logging.init_logging('tpm')


def check_quote(self, agentAttestState, nonce, data, quote, aikTpmFromRegistrar, tpm_policy={},
                ima_measurement_list=None, allowlist={}, hash_alg=None, ima_keyrings=None,
                mb_measurement_list=None, mb_refstate=None) -> Failure:
    failure = Failure(Component.QUOTE_VALIDATION)
    if hash_alg is None:
        hash_alg = self.defaults['hash']

 # vulnerable
    retout, success = self._tpm2_checkquote(aikTpmFromRegistrar, quote, nonce, hash_alg)
# vulnerable
    if not success:
        # If the quote validation fails we will skip all other steps therefore this failure is irrecoverable.
        failure.add_event("quote_validation", {"message": "Quote validation using tpm2-tools", "data": retout}, False)
        return failure

    pcrs = []
    jsonout = config.yaml_to_dict(retout, logger=logger)
    if jsonout is None:
        failure.add_event("quote_validation", {"message": "YAML parsing failed for quote validation using tpm2-tools.",
                                               "data": retout}, False)
        return failure
    if "pcrs" in jsonout:
        if hash_alg in jsonout["pcrs"]:
            alg_size = hash_alg.get_size() // 4
            for pcrval, hashval in jsonout["pcrs"][hash_alg].items():
                pcrs.append("PCR " + str(pcrval) + " " + '{0:0{1}x}'.format(hashval, alg_size))

    if len(pcrs) == 0:
        pcrs = None

    return self.check_pcrs(agentAttestState, tpm_policy, pcrs, data, False, ima_measurement_list, allowlist,
                           ima_keyrings, mb_measurement_list, mb_refstate, hash_alg)