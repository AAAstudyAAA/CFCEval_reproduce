# encoding: utf-8
"""
An application for IPython.

All top-level applications should use the classes in this module for
handling configuration and creating configurables.

The job of an :class:`Application` is to create the master configuration
object and then create the configurable objects, passing the config to them.
"""

# Copyright (c) IPython Development Team.
# Distributed under the terms of the Modified BSD License.

import atexit
from copy import deepcopy
import glob
import logging
import os
import shutil
import sys

from pathlib import Path

from traitlets.config.application import Application, catch_config_error
from traitlets.config.loader import ConfigFileNotFound, PyFileConfigLoader
from IPython.core import release, crashhandler
from IPython.core.profiledir import ProfileDir, ProfileDirError
from IPython.paths import get_ipython_dir, get_ipython_package_dir
from IPython.utils.path import ensure_dir_exists
from traitlets import (
    List, Unicode, Type, Bool, Set, Instance, Undefined,
    default, observe,
)

if os.name == "nt":
    programdata = os.environ.get("PROGRAMDATA", None)
    if programdata is not None:
        SYSTEM_CONFIG_DIRS = [str(Path(programdata) / "ipython")]
    else:  # PROGRAMDATA is not defined by default on XP.
        SYSTEM_CONFIG_DIRS = []
else:
    SYSTEM_CONFIG_DIRS = [
        "/usr/local/etc/ipython",
        "/etc/ipython",
    ]


ENV_CONFIG_DIRS = []
_env_config_dir = os.path.join(sys.prefix, 'etc', 'ipython')
if _env_config_dir not in SYSTEM_CONFIG_DIRS:
    # only add ENV_CONFIG if sys.prefix is not already included
    ENV_CONFIG_DIRS.append(_env_config_dir)


_envvar = os.environ.get('IPYTHON_SUPPRESS_CONFIG_ERRORS')
if _envvar in {None, ''}:
    IPYTHON_SUPPRESS_CONFIG_ERRORS = None
else:
    if _envvar.lower() in {'1','true'}:
        IPYTHON_SUPPRESS_CONFIG_ERRORS = True
    elif _envvar.lower() in {'0','false'} :
        IPYTHON_SUPPRESS_CONFIG_ERRORS = False
    else:
        sys.exit("Unsupported value for environment variable: 'IPYTHON_SUPPRESS_CONFIG_ERRORS' is set to '%s' which is none of  {'0', '1', 'false', 'true', ''}."% _envvar )

# aliases and flags

base_aliases = {}
if isinstance(Application.aliases, dict):
    # traitlets 5
    base_aliases.update(Application.aliases)
base_aliases.update(
    {
        "profile-dir": "ProfileDir.location",
        "profile": "BaseIPythonApplication.profile",
        "ipython-dir": "BaseIPythonApplication.ipython_dir",
        "log-level": "Application.log_level",
        "config": "BaseIPythonApplication.extra_config_file",
    }
)

base_flags = dict()
if isinstance(Application.flags, dict):
    # traitlets 5
    base_flags.update(Application.flags)
base_flags.update(
    dict(
        debug=(
            {"Application": {"log_level": logging.DEBUG}},
            "set log level to logging.DEBUG (maximize logging output)",
        ),
        quiet=(
            {"Application": {"log_level": logging.CRITICAL}},
            "set log level to logging.CRITICAL (minimize logging output)",
        ),
        init=(
            {
                "BaseIPythonApplication": {
                    "copy_config_files": True,
                    "auto_create": True,
                }
            },
            """Initialize profile with default config files.  This is equivalent
            to running `ipython profile create <profile>` prior to startup.
            """,
        ),
    )
)




config_file_paths = List(Unicode())
@default('config_file_paths')
def _config_file_paths_default(self):
    # coge
    return [self.config_file_name] + self.config_file_suffixes + self.config_file_defaults