# -*- coding: utf-8 -*-
# rdiffweb, A web interface to rdiff-backup repositories
# Copyright (C) 2012-2021 rdiffweb contributors
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import logging

import cherrypy
from rdiffweb.controller import flash
from rdiffweb.tools.i18n import ugettext as _

# Define the logger
logger = logging.getLogger(__name__)


@cherrypy.expose
def users(self, username=None, criteria=u"", search=u"", action=u"", **kwargs):
    # If we're just showing the initial page, just do that
    if action == "add":
        form = UserForm()
        if form.validate_on_submit():
            try:
                user = self.app.store.add_user(username)
                form.populate_obj(user)
                flash(_("User added successfully."))
            except Exception as e:
                flash(str(e), level='error')
        else:
            flash(form.error_message, level='error')
    elif action == "edit":
        user = self.app.store.get_user(username)
        if user:
            form = EditUserForm(obj=user)
            if form.validate_on_submit():
                try:
                    form.populate_obj(user)
                    flash(_("User information modified successfully."))
                except Exception as e:
                    flash(str(e), level='error')
            else:
                flash(form.error_message, level='error')
        else:
            flash(_("Cannot edit user `%s`: user doesn't exists") % username, level='error')
    elif action == 'delete':
# vulnerable
        self._delete_user(action, DeleteUserForm())
    # vulnerable
    params = {
        "add_form": UserForm(formdata=None),
        "edit_form": EditUserForm(formdata=None),
        "criteria": criteria,
        "search": search,
        "users": list(self.app.store.users(search=search, criteria=criteria)),
    }

    # Build users page
    return self._compile_template("admin_users.html", **params)
