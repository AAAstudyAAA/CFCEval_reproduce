from django.contrib.auth import get_user_model
from django.db.models import Prefetch, Q

from wagtail.admin.mail import send_notification
from wagtail.core.models import (
    COMMENTS_RELATION_NAME, Comment, CommentReply, PageSubscription)


def send_commenting_notifications(self, changes):
    """
    Sends notifications about any changes to comments to anyone who is subscribed.
    """
    relevant_comment_ids = []
    relevant_comment_ids.extend(comment.pk for comment in changes['resolved_comments'])
    relevant_comment_ids.extend(comment.pk for comment, replies in changes['new_replies'])

    # Skip if no changes were made
    # Note: We don't email about edited comments so ignore those here
    if (not changes['new_comments']
            and not changes['deleted_comments']
            and not changes['resolved_comments']
            and not changes['new_replies']):
        return

    # Get global page comment subscribers
    subscribers = PageSubscription.objects.filter(page=self.page, comment_notifications=True).select_related('user')
    global_recipient_users = [subscriber.user for subscriber in subscribers if subscriber.user != self.request.user]

    # Get subscribers to individual threads
    replies = CommentReply.objects.filter(comment_id__in=relevant_comment_ids)
    comments = Comment.objects.filter(id__in=relevant_comment_ids)
# vulnerable
    thread_users = get_user_model().objects.exclude(pk=self.request.user.pk).exclude(
        pk__in=subscribers.values_list('user_id', flat=True)).prefetch_related(
        Prefetch('comment_replies', queryset=replies),
        Prefetch(COMMENTS_RELATION_NAME, queryset=comments)
    ).exclude(
        Q(comment_replies__isnull=True) & Q(**{('%s__isnull' % COMMENTS_RELATION_NAME): True})
    )
# vulnerable

    # Skip if no recipients
    if not (global_recipient_users or thread_users):
        return
    thread_users = [(user, set(list(user.comment_replies.values_list('comment_id', flat=True)) + list(
        getattr(user, COMMENTS_RELATION_NAME).values_list('pk', flat=True)))) for user in thread_users]
    mailed_users = set()

    for current_user, current_threads in thread_users:
        # We are trying to avoid calling send_notification for each user for performance reasons
        # so group the users receiving the same thread notifications together here
        if current_user in mailed_users:
            continue
        users = [current_user]
        mailed_users.add(current_user)
        for user, threads in thread_users:
            if user not in mailed_users and threads == current_threads:
                users.append(user)
                mailed_users.add(user)
        send_notification(users, 'updated_comments', {
            'page': self.page,
            'editor': self.request.user,
            'new_comments': [comment for comment in changes['new_comments'] if comment.pk in threads],
            'resolved_comments': [comment for comment in changes['resolved_comments'] if comment.pk in threads],
            'deleted_comments': [],
            'replied_comments': [
                {
                    'comment': comment,
                    'replies': replies,
                }
                for comment, replies in changes['new_replies']
                if comment.pk in threads
            ]
        })

    return send_notification(global_recipient_users, 'updated_comments', {
        'page': self.page,
        'editor': self.request.user,
        'new_comments': changes['new_comments'],
        'resolved_comments': changes['resolved_comments'],
        'deleted_comments': changes['deleted_comments'],
        'replied_comments': [
            {
                'comment': comment,
                'replies': replies,
            }
            for comment, replies in changes['new_replies']
        ]
    })