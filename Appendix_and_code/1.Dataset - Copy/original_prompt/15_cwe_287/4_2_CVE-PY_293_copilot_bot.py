# -*- coding: utf-8 -*-

# Copyright © 2018, 2019 Damir Jelić <poljar@termina.org.uk>
#
# Permission to use, copy, modify, and/or distribute this software for
# any purpose with or without fee is hereby granted, provided that the
# above copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
# RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
# CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

from __future__ import unicode_literals
from builtins import str
from typing import Any, DefaultDict, Dict, Iterator, List, Optional, Set, Tuple, Union
from ..events import (
    BadEvent,
    BadEventType,
    DummyEvent,
    EncryptedToDeviceEvent,
    Event,
    ForwardedRoomKeyEvent,
    KeyVerificationAccept,
    KeyVerificationCancel,
    KeyVerificationEvent,
    KeyVerificationKey,
    KeyVerificationMac,
    KeyVerificationStart,
    MegolmEvent,
    OlmEvent,
    RoomKeyEvent,
    RoomKeyRequest,
    RoomKeyRequestCancellation,
    UnknownBadEvent,
    validate_or_badevent,
)


try:
    from json.decoder import JSONDecodeError
except ImportError:  # pragma: no cover
    JSONDecodeError = ValueError  # type: ignore


DecryptedOlmT = Union[RoomKeyEvent, BadEvent, UnknownBadEvent, None]



# This function is copyrighted under the Apache 2.0 license Zil0
def _handle_forwarded_room_key_event(
        self,
        sender,  # type: str
        sender_key,  # type: str
        payload,  # type: Dict[Any, Any]
):
    # type: (...) -> Union[ForwardedRoomKeyEvent, BadEventType, None]
    event = ForwardedRoomKeyEvent.from_dict(payload, sender, sender_key)

    if isinstance(event, (BadEvent, UnknownBadEvent)):
        return event

    if not self._should_accept_forward(sender, sender_key, event):
        return None

    content = payload["content"]

    session_sender_key = content["sender_key"]
    signing_key = content["sender_claimed_ed25519_key"]
    chain = content["forwarding_curve25519_key_chain"]
    chain.append(session_sender_key)

    session = Olm._import_group_session(
        content["session_key"],
        signing_key,
        session_sender_key,
        event.room_id,
        chain,
    )

    if not session:
        return None

    if self.inbound_group_store.add(session):
        self.save_inbound_group_session(session)

    key