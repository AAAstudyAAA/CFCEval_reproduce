import codecs
import encodings
import logging
import os
import sys
from io import open

import cherrypy
from cherrypy.process.plugins import SimplePlugin
from sqlalchemy import Column, Integer, MetaData, SmallInteger, String, Table, Text, create_engine
from sqlalchemy.exc import IntegrityError
from sqlalchemy.sql.expression import and_, or_, select
from sqlalchemy.sql.functions import count
from zxcvbn import zxcvbn

from rdiffweb.core import RdiffError, authorizedkeys
from rdiffweb.core.config import Option
from rdiffweb.core.librdiff import AccessDeniedError, DoesNotExistError, RdiffRepo
from rdiffweb.core.passwd import check_password, hash_password
from rdiffweb.tools.i18n import ugettext as _

# Define the logger
logger = logging.getLogger(__name__)

SEP = b'/'

DEFAULT_REPO_ENCODING = codecs.lookup((sys.getfilesystemencoding() or 'utf-8').lower()).name

# Define roles
ADMIN_ROLE = 0
MAINTAINER_ROLE = 5
USER_ROLE = 10
ROLES = {
    'admin': ADMIN_ROLE,
    'maintainer': MAINTAINER_ROLE,
    'user': USER_ROLE,
}

# Define SQLAlchemy metadata
_META = MetaData()
_USERS = Table(
    'users',
    _META,
    Column('UserID', Integer, key='userid', primary_key=True),
    Column('Username', String, key='username', nullable=False, unique=True),
    Column('Password', String, key='password', nullable=False, server_default=""),
    Column('UserRoot', String, key='user_root', nullable=False, server_default=""),
    Column(
        'IsAdmin',
        SmallInteger,
        key='is_admin',
        nullable=False,
        server_default="0",
        doc="DEPRECATED This column is replaced by 'role'",
    ),
    Column('UserEmail', String, key='email', nullable=False, server_default=""),
    Column(
        'RestoreFormat',
        SmallInteger,
        nullable=False,
        server_default="1",
        doc="DEPRECATED This column is not used anymore",
    ),
    Column('role', SmallInteger, nullable=False, server_default=str(USER_ROLE)),
    sqlite_autoincrement=True,
)

_REPOS = Table(
    'repos',
    _META,
    Column('RepoID', Integer, key='repoid', primary_key=True, autoincrement=True),
    Column('UserID', Integer, key='userid', nullable=False),
    Column('RepoPath', String, key='repopath', nullable=False),
    Column('MaxAge', SmallInteger, key='maxage', nullable=False, server_default="0"),
    Column('Encoding', String, key='encoding'),
    Column('keepdays', String, nullable=False, server_default=""),
    sqlite_autoincrement=True,
)

_SSHKEYS = Table(
    'sshkeys',
    _META,
    Column('Fingerprint', Text, key='fingerprint'),
    Column('Key', Text, key='key', unique=True),
    Column('UserID', Integer, key='userid', nullable=False),
)


 def set_password(self, password, old_password=None):
        """
        Change the user's password. Raise a ValueError if the username or
        the password are invalid.
        """
        assert isinstance(password, str)
        assert old_password is None or isinstance(old_password, str)
        if not password:
            raise ValueError("password can't be empty")

        # Cannot update admin-password if defined
        if self.username == self._store._admin_user and self._store._admin_password:
            raise ValueError(_("can't update admin-password defined in configuration file"))

        # Check current password
        if old_password and not check_password(old_password, self.hash_password):
            raise ValueError(_("Wrong password"))
        # coge
        # Update password hash.
        self.hash_password = hash_password(password)