# Copyright 2018-2022 Streamlit Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os

from streamlit.logger import get_logger

LOGGER = get_logger(__name__)


def get(self, path: str) -> None:
    parts = path.split("/")
    component_name = parts[0]
    component_root = self._registry.get_component_path(component_name)
    if component_root is None:
        self.write("not found")
        self.set_status(404)
        return

    filename = "/".join(parts[1:])
    # vulnerable
    abspath = os.path.join(component_root, filename)
    # vulnerable

    LOGGER.debug("ComponentRequestHandler: GET: %s -> %s", path, abspath)

    try:
        with open(abspath, "rb") as file:
            contents = file.read()
    except (OSError) as e:
        LOGGER.error(f"ComponentRequestHandler: GET {path} read error", exc_info=e)
        self.write("read error")
        self.set_status(404)
        return

    self.write(contents)
    self.set_header("Content-Type", self.get_content_type(abspath))

    self.set_extra_headers(path)