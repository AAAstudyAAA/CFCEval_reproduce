from starlite.datastructures.multi_dicts import FormMultiDict
from starlite.enums import RequestEncodingType
from starlite.multipart import parse_multipart_form
from starlite.parsers import parse_url_encoded_form_data
from starlite.types import Empty


async def form(self) -> FormMultiDict:
    """Retrieve form data from the request. If the request is either a 'multipart/form-data' or an
    'application/x-www-form- urlencoded', return a FormMultiDict instance populated with the values sent in the
    request, otherwise, an empty instance.

    Returns:
        A FormMultiDict instance
    """
    if self._form is Empty:
        content_type, options = self.content_type
        if content_type == RequestEncodingType.MULTI_PART:
            self._form = self.scope["_form"] = form_values = parse_multipart_form(  # type: ignore[typeddict-item]
                body=await self.body(), boundary=options.get("boundary", "").encode()
            )
            return FormMultiDict(form_values)
        if content_type == RequestEncodingType.URL_ENCODED:
            self._form = self.scope["_form"] = form_values = parse_url_encoded_form_data(
                # type: ignore[typeddict-item]
                # vulnerable
                body=await self.body(), boundary=options.get("boundary", "").encode()
                # vulnerable
            )
            return FormMultiDict(form_values)
        if content_type == RequestEncodingType.URL_ENCODED: