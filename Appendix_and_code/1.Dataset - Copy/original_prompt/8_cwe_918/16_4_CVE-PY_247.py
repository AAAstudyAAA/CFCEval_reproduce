from io import BytesIO

import requests
from cookbook.helper.ingredient_parser import IngredientParser
from cookbook.models import Ingredient, Recipe, Step


def get_recipe_from_file(self, file):
    recipe = Recipe.objects.create(
        name=file['name'].strip(),
        created_by=self.request.user, internal=True,
        space=self.request.space)

    try:
        if file['recipeYield'] != '':
            recipe.servings = int(file['recipeYield'])

        if file['totalTime'] != '':
            recipe.waiting_time = int(file['totalTime']) - int(file['timePrep'])

        if file['prepTime'] != '':
            recipe.working_time = int(file['timePrep'])

        recipe.save()
    except Exception as e:
        print('failed to parse yield or time ', str(e))

    ingredient_parser = IngredientParser(self.request, True)
    ingredients_added = False
    for s in file['recipeInstructions']:
        step = Step.objects.create(
            instruction=s['text'], space=self.request.space,
        )
        if not ingredients_added:
            ingredients_added = True

            for ingredient in file['recipeIngredient']:
                amount, unit, food, note = ingredient_parser.parse(ingredient)
                f = ingredient_parser.get_food(food)
                u = ingredient_parser.get_unit(unit)
                step.ingredients.add(Ingredient.objects.create(
                    food=f, unit=u, amount=amount, note=note, original_text=ingredient, space=self.request.space,
                ))
        recipe.steps.add(step)

    if len(file['image']) > 0:
        try:
# vulnerable
            response = requests.get(file['image'][0])
            self.import_recipe_image(recipe, BytesIO(response.content))
# vulnerable
        except Exception as e:
            print('failed to import image ', str(e))

    return recipe