import re
from io import BytesIO
import requests
import validators
from cookbook.helper.ingredient_parser import IngredientParser
from cookbook.helper.recipe_html_import import get_recipe_from_source
from cookbook.helper.recipe_url_import import iso_duration_to_minutes
from cookbook.models import Ingredient, Keyword, Recipe, Step



def get_recipe_from_file(self, file):
    recipe_html = file.getvalue().decode("utf-8")

    receipt_yaml, receipt_Tree, HTML_info, imgs  = get_recipe_from_source(recipe_html, 'CookBookApp', self.request)

    recipe = Recipe.objects.create(
        name=receipt_yaml['name'].strip(),
        created_by=self.request.user, internal=True,
        space=self.request.space)

    try:
        recipe.working_time = iso_duration_to_minutes(receipt_yaml['prepTime'])
        recipe.waiting_time = iso_duration_to_minutes(receipt_yaml['cookTime'])
    except Exception:
        pass
    pace = Step.objects.create(instruction=receipt_yaml['recipeInstructions'], space=self.request.space, )
    try:
        recipe.servings = re.findall('([0-9])+', receipt_yaml['recipeYield'])[0]
    except Exception as e:
        pass


    if 'nutrition' in receipt_yaml:
        pace.instruction = pace.instruction + '\n\n' + receipt_yaml['nutrition']

    pace.save()
    recipe.steps.add(pace)

    element_parser = IngredientParser(self.request, True)
    # for ingredient in receipt_yaml['recipeIngredient']:
    index=0
    while index < len(receipt_yaml['recipeIngredient']):
        ingredient = receipt_yaml['recipeIngredient'][index]
        f = element_parser.get_food(ingredient['ingredient']['text'])
        u = element_parser.get_unit(ingredient['unit']['text'])
        pace.ingredients.add(Ingredient.objects.create(
            food=f, unit=u, amount=ingredient['amount'], note=ingredient['note'],  space=self.request.space,
        ))
        index += 1

    if len(imgs) > 0:
        try:
            # the following code is for fixing the vulnerability CWE-918 (Server-Side Request Forgery )