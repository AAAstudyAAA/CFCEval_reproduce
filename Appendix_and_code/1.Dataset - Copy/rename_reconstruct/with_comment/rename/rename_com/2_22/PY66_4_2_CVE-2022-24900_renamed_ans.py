from webinterface import webinterface
from flask import render_template, send_file, redirect, request, url_for, jsonify
from werkzeug.utils import safe_join
from lib.functions import find_between, theaterChase, theaterChaseRainbow, sound_of_da_police, scanner, breathing, rainbow, rainbowCycle, fastColorWipe, play_midi, clamp
import psutil
import threading
from neopixel import *
import webcolors as wc
import mido
from xml.dom import minidom
from subprocess import call
import subprocess
import datetime
import os
import math
from zipfile import ZipFile
import json
import ast
import time
import RPi.GPIO as GPIO
sense = 12
GPIO.setmode(GPIO.BCM)
GPIO.setup(sense, GPIO.IN, GPIO.PUD_UP)


@webinterface.route('/api/change_setting', methods=['GET'])
def modify_config():
    config_title = request.args.get('setting_name')
    value = request.args.get('value')
    sec = request.args.get('second_value')
    deactived_series = request.args.get('disable_sequence')
    recharge_series = True
    if sec == 'no_reload':
        recharge_series = False
    if deactived_series == 'true':
        webinterface.ledsettings.__init__(webinterface.usersettings)
        webinterface.ledsettings.sequence_active = False
    if config_title == 'clean_ledstrip':
        fastColorWipe(webinterface.ledstrip.strip, True, webinterface.
            ledsettings)
    if config_title == 'led_color':
        rgb = wc.hex_to_rgb('#' + value)
        webinterface.ledsettings.color_mode = 'Single'
        webinterface.ledsettings.red = rgb[0]
        webinterface.ledsettings.green = rgb[1]
        webinterface.ledsettings.blue = rgb[2]
        webinterface.usersettings.change_setting_value('color_mode',
            webinterface.ledsettings.color_mode)
        webinterface.usersettings.change_setting_value('red', rgb[0])
        webinterface.usersettings.change_setting_value('green', rgb[1])
        webinterface.usersettings.change_setting_value('blue', rgb[2])
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'light_mode':
        webinterface.ledsettings.mode = value
        webinterface.usersettings.change_setting_value('mode', value)
    if config_title == 'fading_speed' or config_title == 'velocity_speed':
        webinterface.ledsettings.fadingspeed = int(value)
        webinterface.usersettings.change_setting_value('fadingspeed',
            webinterface.ledsettings.fadingspeed)
    if config_title == 'brightness':
        webinterface.usersettings.change_setting_value('brightness_percent',
            int(value))
        webinterface.ledstrip.change_brightness(int(value), True)
    if config_title == 'backlight_brightness':
        webinterface.ledsettings.backlight_brightness_percent = int(value)
        webinterface.ledsettings.backlight_brightness = (255 * webinterface
            .ledsettings.backlight_brightness_percent / 100)
        webinterface.usersettings.change_setting_value('backlight_brightness',
            int(webinterface.ledsettings.backlight_brightness))
        webinterface.usersettings.change_setting_value(
            'backlight_brightness_percent', webinterface.ledsettings.
            backlight_brightness_percent)
        fastColorWipe(webinterface.ledstrip.strip, True, webinterface.
            ledsettings)
    if config_title == 'backlight_color':
        rgb = wc.hex_to_rgb('#' + value)
        webinterface.ledsettings.backlight_red = rgb[0]
        webinterface.ledsettings.backlight_green = rgb[1]
        webinterface.ledsettings.backlight_blue = rgb[2]
        webinterface.usersettings.change_setting_value('backlight_red', rgb[0])
        webinterface.usersettings.change_setting_value('backlight_green',
            rgb[1])
        webinterface.usersettings.change_setting_value('backlight_blue', rgb[2]
            )
        fastColorWipe(webinterface.ledstrip.strip, True, webinterface.
            ledsettings)
    if config_title == 'sides_color':
        rgb = wc.hex_to_rgb('#' + value)
        webinterface.ledsettings.adjacent_red = rgb[0]
        webinterface.ledsettings.adjacent_green = rgb[1]
        webinterface.ledsettings.adjacent_blue = rgb[2]
        webinterface.usersettings.change_setting_value('adjacent_red', rgb[0])
        webinterface.usersettings.change_setting_value('adjacent_green', rgb[1]
            )
        webinterface.usersettings.change_setting_value('adjacent_blue', rgb[2])
    if config_title == 'sides_color_mode':
        webinterface.ledsettings.adjacent_mode = value
        webinterface.usersettings.change_setting_value('adjacent_mode', value)
    if config_title == 'input_port':
        webinterface.usersettings.change_setting_value('input_port', value)
        webinterface.midiports.change_port('inport', value)
    if config_title == 'secondary_input_port':
        webinterface.usersettings.change_setting_value('secondary_input_port',
            value)
    if config_title == 'play_port':
        webinterface.usersettings.change_setting_value('play_port', value)
        webinterface.midiports.change_port('playport', value)
    if config_title == 'skipped_notes':
        webinterface.usersettings.change_setting_value('skipped_notes', value)
        webinterface.ledsettings.skipped_notes = value
    if config_title == 'add_note_offset':
        webinterface.ledsettings.add_note_offset()
        return jsonify(success=True, reload=True)
    if config_title == 'append_note_offset':
        webinterface.ledsettings.append_note_offset()
        return jsonify(success=True, reload=True)
    if config_title == 'remove_note_offset':
        webinterface.ledsettings.del_note_offset(int(value) + 1)
        return jsonify(success=True, reload=True)
    if config_title == 'note_offsets':
        webinterface.usersettings.change_setting_value('note_offsets', value)
    if config_title == 'update_note_offset':
        webinterface.ledsettings.update_note_offset(int(value) + 1, sec)
        return jsonify(success=True, reload=True)
    if config_title == 'led_count':
        webinterface.usersettings.change_setting_value('led_count', int(value))
        webinterface.ledstrip.change_led_count(int(value), True)
    if config_title == 'shift':
        webinterface.usersettings.change_setting_value('shift', int(value))
        webinterface.ledstrip.change_shift(int(value), True)
    if config_title == 'reverse':
        webinterface.usersettings.change_setting_value('reverse', int(value))
        webinterface.ledstrip.change_reverse(int(value), True)
    if config_title == 'color_mode':
        recharge_series = True
        if sec == 'no_reload':
            recharge_series = False
        webinterface.ledsettings.color_mode = value
        webinterface.usersettings.change_setting_value('color_mode',
            webinterface.ledsettings.color_mode)
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'add_multicolor':
        webinterface.ledsettings.addcolor()
        return jsonify(success=True, reload=True)
    if config_title == 'add_multicolor_and_set_value':
        configs = json.loads(value)
        webinterface.ledsettings.multicolor.clear()
        webinterface.ledsettings.multicolor_range.clear()
        for key, value in configs.items():
            rgb = wc.hex_to_rgb('#' + value['color'])
            webinterface.ledsettings.multicolor.append([int(rgb[0]), int(
                rgb[1]), int(rgb[2])])
            webinterface.ledsettings.multicolor_range.append([int(value[
                'range'][0]), int(value['range'][1])])
        webinterface.usersettings.change_setting_value('multicolor',
            webinterface.ledsettings.multicolor)
        webinterface.usersettings.change_setting_value('multicolor_range',
            webinterface.ledsettings.multicolor_range)
        return jsonify(success=True)
    if config_title == 'remove_multicolor':
        webinterface.ledsettings.deletecolor(int(value) + 1)
        return jsonify(success=True, reload=True)
    if config_title == 'multicolor':
        rgb = wc.hex_to_rgb('#' + value)
        webinterface.ledsettings.multicolor[int(sec)][0] = rgb[0]
        webinterface.ledsettings.multicolor[int(sec)][1] = rgb[1]
        webinterface.ledsettings.multicolor[int(sec)][2] = rgb[2]
        webinterface.usersettings.change_setting_value('multicolor',
            webinterface.ledsettings.multicolor)
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'multicolor_range_left':
        webinterface.ledsettings.multicolor_range[int(sec)][0] = int(value)
        webinterface.usersettings.change_setting_value('multicolor_range',
            webinterface.ledsettings.multicolor_range)
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'multicolor_range_right':
        webinterface.ledsettings.multicolor_range[int(sec)][1] = int(value)
        webinterface.usersettings.change_setting_value('multicolor_range',
            webinterface.ledsettings.multicolor_range)
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'remove_all_multicolors':
        webinterface.ledsettings.multicolor.clear()
        webinterface.ledsettings.multicolor_range.clear()
        webinterface.usersettings.change_setting_value('multicolor',
            webinterface.ledsettings.multicolor)
        webinterface.usersettings.change_setting_value('multicolor_range',
            webinterface.ledsettings.multicolor_range)
        return jsonify(success=True)
    if config_title == 'rainbow_offset':
        webinterface.ledsettings.rainbow_offset = int(value)
        webinterface.usersettings.change_setting_value('rainbow_offset',
            int(webinterface.ledsettings.rainbow_offset))
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'rainbow_scale':
        webinterface.ledsettings.rainbow_scale = int(value)
        webinterface.usersettings.change_setting_value('rainbow_scale', int
            (webinterface.ledsettings.rainbow_scale))
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'rainbow_timeshift':
        webinterface.ledsettings.rainbow_timeshift = int(value)
        webinterface.usersettings.change_setting_value('rainbow_timeshift',
            int(webinterface.ledsettings.rainbow_timeshift))
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'speed_slowest_color':
        rgb = wc.hex_to_rgb('#' + value)
        webinterface.ledsettings.speed_slowest['red'] = rgb[0]
        webinterface.ledsettings.speed_slowest['green'] = rgb[1]
        webinterface.ledsettings.speed_slowest['blue'] = rgb[2]
        webinterface.usersettings.change_setting_value('speed_slowest_red',
            rgb[0])
        webinterface.usersettings.change_setting_value('speed_slowest_green',
            rgb[1])
        webinterface.usersettings.change_setting_value('speed_slowest_blue',
            rgb[2])
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'speed_fastest_color':
        rgb = wc.hex_to_rgb('#' + value)
        webinterface.ledsettings.speed_fastest['red'] = rgb[0]
        webinterface.ledsettings.speed_fastest['green'] = rgb[1]
        webinterface.ledsettings.speed_fastest['blue'] = rgb[2]
        webinterface.usersettings.change_setting_value('speed_fastest_red',
            rgb[0])
        webinterface.usersettings.change_setting_value('speed_fastest_green',
            rgb[1])
        webinterface.usersettings.change_setting_value('speed_fastest_blue',
            rgb[2])
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'gradient_start_color':
        rgb = wc.hex_to_rgb('#' + value)
        webinterface.ledsettings.gradient_start['red'] = rgb[0]
        webinterface.ledsettings.gradient_start['green'] = rgb[1]
        webinterface.ledsettings.gradient_start['blue'] = rgb[2]
        webinterface.usersettings.change_setting_value('gradient_start_red',
            rgb[0])
        webinterface.usersettings.change_setting_value('gradient_start_green',
            rgb[1])
        webinterface.usersettings.change_setting_value('gradient_start_blue',
            rgb[2])
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'gradient_end_color':
        rgb = wc.hex_to_rgb('#' + value)
        webinterface.ledsettings.gradient_end['red'] = rgb[0]
        webinterface.ledsettings.gradient_end['green'] = rgb[1]
        webinterface.ledsettings.gradient_end['blue'] = rgb[2]
        webinterface.usersettings.change_setting_value('gradient_end_red',
            rgb[0])
        webinterface.usersettings.change_setting_value('gradient_end_green',
            rgb[1])
        webinterface.usersettings.change_setting_value('gradient_end_blue',
            rgb[2])
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'speed_max_notes':
        webinterface.ledsettings.speed_max_notes = int(value)
        webinterface.usersettings.change_setting_value('speed_max_notes',
            int(value))
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'speed_period_in_seconds':
        webinterface.ledsettings.speed_period_in_seconds = float(value)
        webinterface.usersettings.change_setting_value(
            'speed_period_in_seconds', float(value))
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'key_in_scale_color':
        rgb = wc.hex_to_rgb('#' + value)
        webinterface.ledsettings.key_in_scale['red'] = rgb[0]
        webinterface.ledsettings.key_in_scale['green'] = rgb[1]
        webinterface.ledsettings.key_in_scale['blue'] = rgb[2]
        webinterface.usersettings.change_setting_value('key_in_scale_red',
            rgb[0])
        webinterface.usersettings.change_setting_value('key_in_scale_green',
            rgb[1])
        webinterface.usersettings.change_setting_value('key_in_scale_blue',
            rgb[2])
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'key_not_in_scale_color':
        rgb = wc.hex_to_rgb('#' + value)
        webinterface.ledsettings.key_not_in_scale['red'] = rgb[0]
        webinterface.ledsettings.key_not_in_scale['green'] = rgb[1]
        webinterface.ledsettings.key_not_in_scale['blue'] = rgb[2]
        webinterface.usersettings.change_setting_value('key_not_in_scale_red',
            rgb[0])
        webinterface.usersettings.change_setting_value('key_not_in_scale_green'
            , rgb[1])
        webinterface.usersettings.change_setting_value('key_not_in_scale_blue',
            rgb[2])
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'scale_key':
        webinterface.ledsettings.scale_key = int(value)
        webinterface.usersettings.change_setting_value('scale_key', int(value))
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'next_step':
        webinterface.ledsettings.set_sequence(0, 1, False)
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'set_sequence':
        if int(value) == 0:
            webinterface.ledsettings.__init__(webinterface.usersettings)
            webinterface.ledsettings.sequence_active = False
        else:
            webinterface.ledsettings.set_sequence(int(value) - 1, 0)
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'change_sequence_name':
        episodes_Tree = minidom.parse('sequences.xml')
        series_to_modify = 'sequence_' + str(value)
        episodes_Tree.getElementsByTagName(series_to_modify)[0
            ].getElementsByTagName('settings')[0].getElementsByTagName(
            'sequence_name')[0].firstChild.nodeValue = str(sec)
        pretty_save('sequences.xml', episodes_Tree)
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'change_step_value':
        episodes_Tree = minidom.parse('sequences.xml')
        series_to_modify = 'sequence_' + str(value)
        episodes_Tree.getElementsByTagName(series_to_modify)[0
            ].getElementsByTagName('settings')[0].getElementsByTagName(
            'next_step')[0].firstChild.nodeValue = str(sec)
        pretty_save('sequences.xml', episodes_Tree)
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'change_step_activation_method':
        episodes_Tree = minidom.parse('sequences.xml')
        series_to_modify = 'sequence_' + str(value)
        episodes_Tree.getElementsByTagName(series_to_modify)[0
            ].getElementsByTagName('settings')[0].getElementsByTagName(
            'control_number')[0].firstChild.nodeValue = str(sec)
        pretty_save('sequences.xml', episodes_Tree)
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'add_sequence':
        episodes_Tree = minidom.parse('sequences.xml')
        episodes_sum = 1
        while True:
            if len(episodes_Tree.getElementsByTagName('sequence_' + str(
                episodes_sum))) == 0:
                break
            episodes_sum += 1
        configs = episodes_Tree.createElement('settings')
        govern_num = episodes_Tree.createElement('control_number')
        govern_num.appendChild(episodes_Tree.createTextNode('0'))
        configs.appendChild(govern_num)
        following_pace = episodes_Tree.createElement('next_step')
        following_pace.appendChild(episodes_Tree.createTextNode('1'))
        configs.appendChild(following_pace)
        series_title = episodes_Tree.createElement('sequence_name')
        series_title.appendChild(episodes_Tree.createTextNode('Sequence ' +
            str(episodes_sum)))
        configs.appendChild(series_title)
        pace = episodes_Tree.createElement('step_1')
        hue = episodes_Tree.createElement('color')
        hue.appendChild(episodes_Tree.createTextNode('RGB'))
        pace.appendChild(hue)
        red = episodes_Tree.createElement('Red')
        red.appendChild(episodes_Tree.createTextNode('255'))
        pace.appendChild(red)
        green = episodes_Tree.createElement('Green')
        green.appendChild(episodes_Tree.createTextNode('255'))
        pace.appendChild(green)
        blue = episodes_Tree.createElement('Blue')
        blue.appendChild(episodes_Tree.createTextNode('255'))
        pace.appendChild(blue)
        fall_pattern = episodes_Tree.createElement('light_mode')
        fall_pattern.appendChild(episodes_Tree.createTextNode('Normal'))
        pace.appendChild(fall_pattern)
        ingredient = episodes_Tree.createElement('sequence_' + str(
            episodes_sum))
        ingredient.appendChild(configs)
        ingredient.appendChild(pace)
        episodes_Tree.getElementsByTagName('list')[0].appendChild(ingredient)
        pretty_save('sequences.xml', episodes_Tree)
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'remove_sequence':
        episodes_Tree = minidom.parse('sequences.xml')
        knobs = episodes_Tree.getElementsByTagName('sequence_' + str(value))
        for knob in knobs:
            rear = knob.parentNode
            rear.removeChild(knob)
        i = 1
        for series in episodes_Tree.getElementsByTagName('list')[0].childNodes:
            if series.nodeType == 1:
                episodes_Tree.getElementsByTagName(series.nodeName)[0
                    ].tagName = 'sequence_' + str(i)
                i += 1
        pretty_save('sequences.xml', episodes_Tree)
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'add_step':
        episodes_Tree = minidom.parse('sequences.xml')
        pace_sum = 1
        while True:
            if len(episodes_Tree.getElementsByTagName('sequence_' + str(
                value))[0].getElementsByTagName('step_' + str(pace_sum))) == 0:
                break
            pace_sum += 1
        pace = episodes_Tree.createElement('step_' + str(pace_sum))
        hue = episodes_Tree.createElement('color')
        hue.appendChild(episodes_Tree.createTextNode('RGB'))
        pace.appendChild(hue)
        red = episodes_Tree.createElement('Red')
        red.appendChild(episodes_Tree.createTextNode('255'))
        pace.appendChild(red)
        green = episodes_Tree.createElement('Green')
        green.appendChild(episodes_Tree.createTextNode('255'))
        pace.appendChild(green)
        blue = episodes_Tree.createElement('Blue')
        blue.appendChild(episodes_Tree.createTextNode('255'))
        pace.appendChild(blue)
        fall_pattern = episodes_Tree.createElement('light_mode')
        fall_pattern.appendChild(episodes_Tree.createTextNode('Normal'))
        pace.appendChild(fall_pattern)
        episodes_Tree.getElementsByTagName('sequence_' + str(value))[0
            ].appendChild(pace)
        pretty_save('sequences.xml', episodes_Tree)
        return jsonify(success=True, reload_sequence=recharge_series,
            reload_steps_list=True)
    if config_title == 'remove_step':
        sec = int(sec)
        sec += 1
        episodes_Tree = minidom.parse('sequences.xml')
        knobs = episodes_Tree.getElementsByTagName('sequence_' + str(value))[0
            ].getElementsByTagName('step_' + str(sec))
        for knob in knobs:
            rear = knob.parentNode
            rear.removeChild(knob)
        i = 1
        for pace in episodes_Tree.getElementsByTagName('sequence_' + str(value)
            )[0].childNodes:
            if pace.nodeType == 1 and pace.tagName != 'settings':
                episodes_Tree.getElementsByTagName('sequence_' + str(value))[0
                    ].getElementsByTagName(pace.nodeName)[0
                    ].tagName = 'step_' + str(i)
                i += 1
        pretty_save('sequences.xml', episodes_Tree)
        return jsonify(success=True, reload_sequence=recharge_series)
    if config_title == 'save_led_settings_to_step' and sec != '':
        episodes_Tree = minidom.parse('sequences.xml')
        sec = int(sec)
        sec += 1
        knobs = episodes_Tree.getElementsByTagName('sequence_' + str(value))[0
            ].getElementsByTagName('step_' + str(sec))
        for knob in knobs:
            rear = knob.parentNode
            rear.removeChild(knob)
        pace = episodes_Tree.createElement('step_' + str(sec))
        hue_pattern = episodes_Tree.createElement('color')
        hue_pattern.appendChild(episodes_Tree.createTextNode(str(
            webinterface.ledsettings.color_mode)))
        pace.appendChild(hue_pattern)
        pattern = episodes_Tree.createElement('light_mode')
        pattern.appendChild(episodes_Tree.createTextNode(str(webinterface.
            ledsettings.mode)))
        pace.appendChild(pattern)
        if (webinterface.ledsettings.mode == 'Fading' or webinterface.
            ledsettings.mode == 'Velocity'):
            fades = episodes_Tree.createElement('fadingspeed')
            if webinterface.ledsettings.fadingspeed == 'Slow':
                fades.appendChild(episodes_Tree.createTextNode('10'))
            elif webinterface.ledsettings.fadingspeed == 'Medium':
                fades.appendChild(episodes_Tree.createTextNode('20'))
            elif webinterface.ledsettings.fadingspeed == 'Fast':
                fades.appendChild(episodes_Tree.createTextNode('40'))
            elif webinterface.ledsettings.fadingspeed == 'Very fast':
                fades.appendChild(episodes_Tree.createTextNode('50'))
            elif webinterface.ledsettings.fadingspeed == 'Instant':
                fades.appendChild(episodes_Tree.createTextNode('1000'))
            elif webinterface.ledsettings.fadingspeed == 'Very slow':
                fades.appendChild(episodes_Tree.createTextNode('2'))
            pace.appendChild(fades)
        if webinterface.ledsettings.color_mode == 'Single':
            red = episodes_Tree.createElement('Red')
            red.appendChild(episodes_Tree.createTextNode(str(webinterface.
                ledsettings.red)))
            pace.appendChild(red)
            green = episodes_Tree.createElement('Green')
            green.appendChild(episodes_Tree.createTextNode(str(webinterface
                .ledsettings.green)))
            pace.appendChild(green)
            blue = episodes_Tree.createElement('Blue')
            blue.appendChild(episodes_Tree.createTextNode(str(webinterface.
                ledsettings.blue)))
            pace.appendChild(blue)
        if webinterface.ledsettings.color_mode == 'Multicolor':
            pied = webinterface.ledsettings.multicolor
            for i in range(len(pied)):
                hue = episodes_Tree.createElement('color_' + str(i + 1))
                new_pied = str(pied[i])
                new_pied = new_pied.replace('[', '')
                new_pied = new_pied.replace(']', '')
                hue.appendChild(episodes_Tree.createTextNode(new_pied))
                pace.appendChild(hue)
            pied_scope = webinterface.ledsettings.multicolor_range
            for i in range(len(pied_scope)):
                hue_scope = episodes_Tree.createElement('color_range_' +
                    str(i + 1))
                new_pied_scope = str(pied_scope[i])
                new_pied_scope = new_pied_scope.replace('[', '')
                new_pied_scope = new_pied_scope.replace(']', '')
                hue_scope.appendChild(episodes_Tree.createTextNode(
                    new_pied_scope))
                pace.appendChild(hue_scope)
        if webinterface.ledsettings.color_mode == 'Rainbow':
            rainbows = episodes_Tree.createElement('Offset')
            rainbows.appendChild(episodes_Tree.createTextNode(str(
                webinterface.ledsettings.rainbow_offset)))
            pace.appendChild(rainbows)
            rainbows_range = episodes_Tree.createElement('Scale')
            rainbows_range.appendChild(episodes_Tree.createTextNode(str(
                webinterface.ledsettings.rainbow_scale)))
            pace.appendChild(rainbows_range)
            rainbows_playout = episodes_Tree.createElement('Timeshift')
            rainbows_playout.appendChild(episodes_Tree.createTextNode(str(
                webinterface.ledsettings.rainbow_timeshift)))
            pace.appendChild(rainbows_playout)
        if webinterface.ledsettings.color_mode == 'Speed':
            velocity_red = episodes_Tree.createElement('speed_slowest_red')
            velocity_red.appendChild(episodes_Tree.createTextNode(str(
                webinterface.ledsettings.speed_slowest['red'])))
            pace.appendChild(velocity_red)
            velocity = episodes_Tree.createElement('speed_slowest_green')
            velocity.appendChild(episodes_Tree.createTextNode(str(
                webinterface.ledsettings.speed_slowest['green'])))
            pace.appendChild(velocity)
            velocity = episodes_Tree.createElement('speed_slowest_blue')
            velocity.appendChild(episodes_Tree.createTextNode(str(
                webinterface.ledsettings.speed_slowest['blue'])))
            pace.appendChild(velocity)
            velocity_rapidest_red = episodes_Tree.createElement(
                'speed_fastest_red')
            velocity_rapidest_red.appendChild(episodes_Tree.createTextNode(
                str(webinterface.ledsettings.speed_fastest['red'])))
            pace.appendChild(velocity_rapidest_red)
            velocity_rapidest = episodes_Tree.createElement(
                'speed_fastest_green')
            velocity_rapidest.appendChild(episodes_Tree.createTextNode(str(
                webinterface.ledsettings.speed_fastest['green'])))
            pace.appendChild(velocity_rapidest)
            velocity_rapidest = episodes_Tree.createElement(
                'speed_fastest_blue')
            velocity_rapidest.appendChild(episodes_Tree.createTextNode(str(
                webinterface.ledsettings.speed_fastest['blue'])))
            pace.appendChild(velocity_rapidest)
            velocity_max = episodes_Tree.createElement('speed_max_notes')
            velocity_max.appendChild(episodes_Tree.createTextNode(str(
                webinterface.ledsettings.speed_max_notes)))
            pace.appendChild(velocity_max)
            velocity_flow_in_second = episodes_Tree.createElement(
                'speed_period_in_seconds')
            velocity_flow_in_second.appendChild(episodes_Tree.
                createTextNode(str(webinterface.ledsettings.
                speed_period_in_seconds)))
            pace.appendChild(velocity_flow_in_second)
        if webinterface.ledsettings.color_mode == 'Gradient':
            slope_beginning_red = episodes_Tree.createElement(
                'gradient_start_red')
            slope_beginning_red.appendChild(episodes_Tree.createTextNode(
                str(webinterface.ledsettings.gradient_start['red'])))
            pace.appendChild(slope_beginning_red)
            slope_beginning = episodes_Tree.createElement(
                'gradient_start_green')
            slope_beginning.appendChild(episodes_Tree.createTextNode(str(
                webinterface.ledsettings.gradient_start['green'])))
            pace.appendChild(slope_beginning)
            slope_beginning = episodes_Tree.createElement('gradient_start_blue'
                )
            slope_beginning.appendChild(episodes_Tree.createTextNode(str(
                webinterface.ledsettings.gradient_start['blue'])))
            pace.appendChild(slope_beginning)
            slope_end_red = episodes_Tree.createElement('gradient_end_red')
            slope_end_red.appendChild(episodes_Tree.createTextNode(str(
                webinterface.ledsettings.gradient_end['red'])))
            pace.appendChild(slope_end_red)
            slope_end = episodes_Tree.createElement('gradient_end_green')
            slope_end.appendChild(episodes_Tree.createTextNode(str(
                webinterface.ledsettings.gradient_end['green'])))
            pace.appendChild(slope_end)
            slope_end = episodes_Tree.createElement('gradient_end_blue')
            slope_end.appendChild(episodes_Tree.createTextNode(str(
                webinterface.ledsettings.gradient_end['blue'])))
            pace.appendChild(slope_end)
        if webinterface.ledsettings.color_mode == 'Scale':
            key_in_range_red = episodes_Tree.createElement('key_in_scale_red')
            key_in_range_red.appendChild(episodes_Tree.createTextNode(str(
                webinterface.ledsettings.key_in_scale['red'])))
            pace.appendChild(key_in_range_red)
            key_in_range = episodes_Tree.createElement('key_in_scale_green')
            key_in_range.appendChild(episodes_Tree.createTextNode(str(
                webinterface.ledsettings.key_in_scale['green'])))
            pace.appendChild(key_in_range)
            key_in_range = episodes_Tree.createElement('key_in_scale_blue')
            key_in_range.appendChild(episodes_Tree.createTextNode(str(
                webinterface.ledsettings.key_in_scale['blue'])))
            pace.appendChild(key_in_range)
            key_not_in_range_red = episodes_Tree.createElement(
                'key_not_in_scale_red')
            key_not_in_range_red.appendChild(episodes_Tree.createTextNode(
                str(webinterface.ledsettings.key_not_in_scale['red'])))
            pace.appendChild(key_not_in_range_red)
            key_not_in_range = episodes_Tree.createElement(
                'key_not_in_scale_green')
            key_not_in_range.appendChild(episodes_Tree.createTextNode(str(
                webinterface.ledsettings.key_not_in_scale['green'])))
            pace.appendChild(key_not_in_range)
            key_not_in_range = episodes_Tree.createElement(
                'key_not_in_scale_blue')
            key_not_in_range.appendChild(episodes_Tree.createTextNode(str(
                webinterface.ledsettings.key_not_in_scale['blue'])))
            pace.appendChild(key_not_in_range)
        try:
            episodes_Tree.getElementsByTagName('sequence_' + str(value))[0
                ].insertBefore(pace, episodes_Tree.getElementsByTagName(
                'sequence_' + str(value))[0].getElementsByTagName('step_' +
                str(sec + 1))[0])
        except:
            episodes_Tree.getElementsByTagName('sequence_' + str(value))[0
                ].appendChild(pace)
        pretty_save('sequences.xml', episodes_Tree)
        return jsonify(success=True, reload_sequence=recharge_series,
            reload_steps_list=True)
    if config_title == 'screen_on':
        if int(value) == 0:
            webinterface.menu.disable_screen()
        else:
            webinterface.menu.enable_screen()
    if config_title == 'reset_to_default':
        webinterface.usersettings.reset_to_default()
    if config_title == 'restart_rpi':
        call('sudo /sbin/reboot now', shell=True)
    if config_title == 'turnoff_rpi':
        call('sudo /sbin/shutdown -h now', shell=True)
    if config_title == 'update_rpi':
        call('sudo git reset --hard HEAD', shell=True)
        call('sudo git checkout .', shell=True)
        call('sudo git clean -fdx', shell=True)
        call('sudo git pull origin master', shell=True)
    if config_title == 'connect_ports':
        webinterface.midiports.connectall()
        return jsonify(success=True, reload_ports=True)
    if config_title == 'disconnect_ports':
        call('sudo aconnect -x', shell=True)
        return jsonify(success=True, reload_ports=True)
    if config_title == 'restart_rtp':
        call('sudo systemctl restart rtpmidid', shell=True)
    if config_title == 'start_recording':
        webinterface.saving.start_recording()
        return jsonify(success=True, reload_songs=True)
    if config_title == 'cancel_recording':
        webinterface.saving.cancel_recording()
        return jsonify(success=True, reload_songs=True)
    if config_title == 'save_recording':
        now = datetime.datetime.now()
        existing_time = now.strftime('%Y-%m-%d %H:%M')
        webinterface.saving.save(existing_time)
        return jsonify(success=True, reload_songs=True)
    if config_title == 'change_song_name':
        if os.path.exists('Songs/' + sec):
            return jsonify(success=False, reload_songs=True, error=sec +
                ' already exists')
        if '_main' in value:
            seek_title = value.replace('_main.mid', '')
            for fn in os.listdir('Songs'):
                if seek_title in fn:
                    new_title = sec.replace('.mid', '') + fn.replace(seek_title
                        , '')
                    os.rename('Songs/' + fn, 'Songs/' + new_title)
        else:
            os.rename('Songs/' + value, 'Songs/' + sec)
            os.rename('Songs/cache/' + value + '.p', 'Songs/cache/' + sec +
                '.p')
        return jsonify(success=True, reload_songs=True)
    if config_title == 'remove_song':
        if '_main' in value:
            title_no_ending = value.replace('_main.mid', '')
            for fn in os.listdir('Songs'):
                if title_no_ending in fn:
                    os.remove('Songs/' + fn)
        else:
            os.remove('Songs/' + value)
            doc_categories = ['.musicxml', '.xml', '.mxl', '.abc']
            for doc_category in doc_categories:
                try:
                    os.remove('Songs/' + value.replace('.mid', doc_category))
                except:
                    pass
            try:
                os.remove('Songs/cache/' + value + '.p')
            except:
                print('No cache file for ' + value)
        return jsonify(success=True, reload_songs=True)
    if config_title == 'download_song':
        if '_main' in value:
            zipObj = ZipFile('Songs/' + value.replace('.mid', '') + '.zip', 'w'
                )
            title_no_ending = value.replace('_main.mid', '')
            music_total = 0
            for fn in os.listdir('Songs'):
                if title_no_ending in fn and '.zip' not in fn:
                    music_total += 1
                    zipObj.write('Songs/' + fn)
            zipObj.close()
            if music_total == 1:
                os.remove('Songs/' + value.replace('.mid', '') + '.zip')
                return send_file('../Songs/' + value, mimetype=
                    'application/x-csv', attachment_filename=value,
                    as_attachment=True)
            else:
                return send_file('../Songs/' + value.replace('.mid', '') +
                    '.zip', mimetype='application/x-csv',
                    attachment_filename=value.replace('.mid', '') + '.zip',
                    as_attachment=True)
        else:
            return send_file(safe_join('../Songs/' + value), mimetype=
                'application/x-csv', attachment_filename=value,
                as_attachment=True)
    if config_title == 'download_sheet_music':
        doc_categories = ['.musicxml', '.xml', '.mxl', '.abc']
        i = 0
        while i < len(doc_categories):
            try:
                new_title = value.replace('.mid', doc_categories[i])
                return send_file('../Songs/' + new_title, mimetype=
                    'application/x-csv', attachment_filename=new_title,
                    as_attachment=True)
            except:
                i += 1
        webinterface.learning.convert_midi_to_abc(value)
        try:
            return send_file(safe_join('../Songs/', value.replace('.mid',
                '.abc')), mimetype='application/x-csv', attachment_filename
                =value.replace('.mid', '.abc'), as_attachment=True)
        except:
            print('Converting failed')
    if config_title == 'start_midi_play':
        doc_categories = ['.musicxml', '.xml', '.mxl', '.abc']
        i = 0
        while i < len(doc_categories):
            try:
                new_title = value.replace('.mid', doc_categories[i])
                return send_file('../Songs/' + new_title, mimetype=
                    'application/x-csv', attachment_filename=new_title,
                    as_attachment=True)
            except:
                i += 1
        webinterface.learning.convert_midi_to_abc(value)
        try:
            # the following code is for fixing the vulnerability CWE-22 (Path Traversal)

