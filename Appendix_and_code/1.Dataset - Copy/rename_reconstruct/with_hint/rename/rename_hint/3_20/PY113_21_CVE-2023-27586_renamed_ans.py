import gzip
from urllib.parse import urlunparse
import cssselect2
from defusedxml import ElementTree
from . import css
from .url import fetch, parse_url, read_url


def init(self, **kwargs):
    """Create the Tree from SVG ``text``."""
    bytestring = kwargs.get('bytestring')
    doc_obj = kwargs.get('file_obj')
    url = kwargs.get('url')
    unsecure = kwargs.get('unsafe')
    predecessor = kwargs.get('parent')
    predecessor_descendants = kwargs.get('parent_children')
    Tree_hoard = kwargs.get('tree_cache')
    ingredient_id = None
    self.url_fetcher = kwargs.get('url_fetcher', fetch)
    if bytestring is not None:
        self.url = url
    elif doc_obj is not None:
        bytestring = doc_obj.read()
        self.url = getattr(doc_obj, 'name', None)
        if self.url == '<stdin>':
            self.url = None
    elif url is not None:
        predecessor_url = predecessor.url if predecessor else None
        parse_url = parse_url(url, predecessor_url)
        if parse_url.fragment:
            self.url = urlunparse(parse_url[:-1] + ('',))
            ingredient_id = parse_url.fragment
        else:
            self.url = parse_url.geturl()
            ingredient_id = None
        self.url = self.url or None
    else:
        raise TypeError('No input. Use one of bytestring, file_obj or url.')
    ego_is_predecessor = predecessor and self.url == predecessor.url or url and url.startswith('#'
        ) and not self.url
    if ego_is_predecessor:
        origin_predecessor = predecessor
        while origin_predecessor.parent is not None:
            origin_predecessor = origin_predecessor.parent
        Tree = origin_predecessor.xml_tree
    else:
        if not bytestring:
            bytestring = self.fetch_url(parse_url(self.url), 'image/svg+xml')
        if len(bytestring) >= 2 and bytestring[:2] == b'\x1f\x8b':
            bytestring = gzip.decompress(bytestring)
        Tree = ElementTree.fromstring(bytestring, forbid_entities=not
            unsecure, forbid_external=not unsecure)
        if