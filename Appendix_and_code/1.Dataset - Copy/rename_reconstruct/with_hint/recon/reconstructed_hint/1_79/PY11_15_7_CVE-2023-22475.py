def render_POST(self, request):
    try:
        try:
            auth  = request.args.get('auth',  None)[0]
            token = request.args.get('token', None)[0]

            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))
            if not canarydrop['auth'] or canarydrop['auth'] != auth:
                raise NoCanarytokenPresent()

        except (IndexError, TypeError, NoCanarytokenPresent):
            return NoResource().render(request)
        try:
            webhook_enable= request.args.get('webhook_enable', None)
            webhook_enable_status = webhook_enable[0] == "on"
        except (TypeError, IndexError):
            webhook_enable_status = False
        try:
            email_enable=request.args.get('email_enable', None)
            email_enable_status =email_enable[0] == "on"
        except (TypeError, IndexError):
            email_enable_status = False

        try:
            web_image_enable = request.args.get('web_image_enable', None)
            web_image_status = web_image_enable[0] == "on"
        except (TypeError, IndexError):
            web_image_status = False

        try:
            sms_enable= request.args.get('sms_enable', None)
            sms_enable_status =sms_enable[0] == "on"
        except (TypeError, IndexError):
            sms_enable_status = False


        try:
            fmt=request.args.get('fmt', None)
            token_fmt = fmt[0]
        except (TypeError, IndexError):
            token_fmt = ''

        canarydrop['alert_email_enabled'] = email_enable_status
        canarydrop['alert_webhook_enabled'] = webhook_enable_status
        canarydrop['alert_sms_enabled']   = sms_enable_status
        canarydrop['web_image_enabled']   = web_image_status

        save_canarydrop(canarydrop=canarydrop)

        g_api_key = get_canary_google_api_key()
        template = unsafe_env.get_template('manage.html')
        template=template.render(canarydrop=canarydrop, saved=True,
                                 settings=settings, API_KEY=g_api_key)
        return template.encode('utf8')

    except Exception as e:
        import traceback
        log.error('Exception in manage.html: {e}, {stack}'.format(e=e, stack=traceback.format_exc()))
        template