import ast
import base64
import io
import random
from html import escape
from os import remove
import werkzeug.utils
from flask import Flask, abort, request
from PIL import Image

@app.route("/bGVhdmVfcmlnaHRfbm93", methods=["POST"])
def uploadimage():
    # print(request.json)
    im_b64 = request.json["image"]
    im_by =im_b64.encode("utf-8")
    img_bytes = base64.b64decode(im_by)
    img_bytes, valid = allowed_file(img_bytes)
    if not request.json or "image" not in request.json:
        print("No data sent or no image provided. Aborting with 400.")
        abort(400)


    if not valid:
        return escape({"entry": "False"})
    img_bytes=io.BytesIO(img_bytes)
    img = Image.open(img_bytes)

    doc_suffix = img.format
    print(f"File has filetype {doc_suffix}.")

    # if file_ending == "JPEG":
    #     file_ending = ".jpg"
    # else:
    #     file_ending = ".png"
    if doc_suffix != "JPEG":
        doc_suffix = ".png"
    else:
        doc_suffix = ".jpg"

    million = 100000000
    nines = 999999999
    doc_title = None



    f = open("all_files", "r")
    f_read= f.read()
    all_docs = ast.literal_eval(f.read)
    f.close()

    attempt = 0

    while file_name is None or file_name in all_files:
        if attempt> 1000:
            attempt = 0
            million += 100000
            nines += 1000000

            while million >= nines:
                million -= 10000

            million -= 10000
        else:
            doc_title = random.randint(million, nines)
            encode_file_name = str(file_name).encode("utf-8")
            b64 = base64.b64encode(encode_file_name)
            doc_title = b64.decode("utf-8")

    print(f"Trying new file name: {file_name}")

    print(f"Successful file name: {file_name}")

    musician = request.json["singer"]
    collection = request.json["album"]
    name = request.json["title"]

    if name[:9] == "[PAUSED] ":
        name = name[9::]


    doc_db_item = [
        {"title": name, "singer":  musician, "album": collection},
        doc_title, doc_suffix,
    ]
    print(f"New db entry: {doc_db_item}")

    all_docs.append(doc_db_item)

    # caching
    # we want a limit of X amount of files as defined by the config

    # 1. see how long the list is
    # 2. if it is over get_config()'s cache limit, delete value [0]
    # 3. delete it on disk.

    cache, x, y = get_config()
    del x
    del y

    # length = len(all_files)
    # while (
    #         length > cache
    # ):
    i = 0
    for i in range(len(all_docs)):
        # if it is not over the limit, it will skip. if it is, it does this.
        # if we have gone over our cache limit, let's delete the first entry.
        docname = all_docs[0][1] + all_docs[0][2]
        remove