import base64
import gzip
import json
import re
from gettext import gettext as _
import re
from io import BytesIO
import requests
import validators
from cookbook.helper.ingredient_parser import IngredientParser
from cookbook.helper.recipe_html_import import get_recipe_from_source
from cookbook.helper.recipe_url_import import iso_duration_to_minutes
from cookbook.models import Ingredient, Keyword, Recipe, Step


def get_receipt_from_doc(self, file):
    receipt_HTML = file.getvalue().decode('utf-8')

    receipt_yaml, receipt_Tree, HTML_info, imgs = get_recipe_from_source(receipt_HTML, 'CookBookApp', self.request)

    receipt = Recipe.objects.create(
        name=receipt_yaml['name'].strip(),
        created_by=self.request.user,
        internal=True,
        space=self.request.space)

    try:
        receipt.servings = re.findall('([0-9])+', receipt_yaml['recipeYield'])[0]
    except Exception as e:
        pass
    try:
        receipt.working_time = iso_duration_to_minutes(receipt_yaml['prepTime'])
        receipt.waiting_time = iso_duration_to_minutes(receipt_yaml['cookTime'])
    except Exception:
        pass

    pace = Step.objects.create(instruction=receipt_yaml[
        'recipeInstructions'], space=self.request.space)
    if 'nutrition' in receipt_yaml:
        pace.instruction = pace.instruction + '\n\n' + receipt_yaml['nutrition']
    pace.save()
    receipt.steps.add(pace)
    element_parser = IngredientParser(self.request, True)
    for element in receipt_yaml['recipeIngredient']:
        f = element_parser.get_food(element['ingredient']['text'])
        u = element_parser.get_unit(element['unit']['text'])
        pace.ingredients.add(Ingredient.objects.create(food=f, unit=u,
            amount=element['amount'], note=element['note'], space=self.
            request.space))
    if len(imgs) > 0:
        try:
            # the following code is for fixing the vulnerability CWE-918 (Server-Side Request Forgery )