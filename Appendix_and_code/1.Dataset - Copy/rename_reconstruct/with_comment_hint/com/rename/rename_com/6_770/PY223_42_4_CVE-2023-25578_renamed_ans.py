from typing import TYPE_CHECKING, Any, Callable, Coroutine, Optional, cast
from starlite.datastructures.upload_file import UploadFile
from starlite.multipart import parse_multipart_form
from starlite.params import BodyKwarg
if TYPE_CHECKING:
    from starlite.connection import ASGIConnection, Request
    from starlite.signature.models import SignatureField


def produce_composite_separator(signature_field: 'SignatureField',
    is_data_optional: bool) ->Callable[['ASGIConnection[Any, Any, Any]'],
    Coroutine[Any, Any, Any]]:
    """Create a multipart form-data extractor.

    Args:
        signature_field: A SignatureField instance.
        is_data_optional: Boolean dictating whether the field is optional.

    Returns:
        An extractor function.
    """
    content_kwa_composite_table_division_restrict: Optional[int] = None
    if signature_field.kwarg_model and isinstance(signature_field.kwarg_model, BodyKwarg):
        content_kwa_composite_table_division_restrict = (signature_field.kwarg_model.multipart_form_part_limit)

    async def extract_multipart(connection: 'Request[Any, Any]') ->Any:
        composite_table_division_restrict = (
            content_kwa_composite_table_division_restrict if 
            content_kwa_composite_table_division_restrict is not None else
            connection.app.multipart_form_part_limit)
        connection.scope['_form'] = table_rates\
            = connection.scope['_form'] \
            if '_form' in connection.scope \
            else parse_multipart_form(
                    # the following code is for fixing the vulnerability CWE-770 (Allocation of Resources Without Limits or Throttling)
