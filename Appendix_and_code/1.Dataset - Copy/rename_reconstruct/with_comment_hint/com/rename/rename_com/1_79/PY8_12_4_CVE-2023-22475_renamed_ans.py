import twisted.web.resource
from twisted.web.resource import Resource, EncodingResourceWrapper, \
                                 ForbiddenResource, NoResource
from twisted.logger import Logger
log = Logger()
from jinja2 import Environment, FileSystemLoader
from canarydrop import Canarydrop
from queries import is_valid_email, save_canarydrop, save_imgur_token, get_canarydrop,\
                    create_linkedin_account, create_bitcoin_account,\
                    get_linkedin_account, get_bitcoin_account, \
                    save_clonedsite_token, get_all_canary_sites, get_canary_google_api_key,\
                    is_webhook_valid, get_aws_keys, get_all_canary_domains, is_email_blocked

from exception import NoCanarytokenPresent
import datetime


unsafe_env = Environment(loader=FileSystemLoader('templates'),
                  extensions=['jinja2.ext.loopcontrols'])
env = Environment(loader=FileSystemLoader('templates'),
                  extensions=['jinja2.ext.loopcontrols'],
                  autoescape=True)

with open('/srv/templates/error_http.html', 'r') as f:
    twisted.web.resource.ErrorPage.template = f.read()

def try_GET(self, request):
    try:
        key = request.args.get('token', None)[0]
        authorized = request.args.get('auth', None)[0]
        canary = Canarydrop(**get_canarydrop(canarytoken=key))
        if not canary['auth'] or canary['auth'] != authorized:
            raise NoCanarytokenPresent()
        if canary.get('triggered_list', None):
            for timestamps in canary['triggered_list'].keys():
                format_timestamps = datetime.datetime.fromtimestamp(float(
                    timestamps)).strftime('%Y %b %d %H:%M:%S (UTC)')
                canary['triggered_list'][format_timestamps] = canary[
                    'triggered_list'].pop(timestamps)
    except (TypeError, NoCanarytokenPresent):
        return NoResource().render(request)
    g_api_key = get_canary_google_api_key()
    now = datetime.datetime.now()
    try:
        canary['type']
        frame = unsafe_env.get_template('manage_new.html')
    except KeyError:
         # the following code is for fixing the vulnerability CWE-79 (Cross-site Scripting)