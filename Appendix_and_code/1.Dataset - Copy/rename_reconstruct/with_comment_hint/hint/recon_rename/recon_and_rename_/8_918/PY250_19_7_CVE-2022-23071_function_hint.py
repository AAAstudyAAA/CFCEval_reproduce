import io
import mimetypes
import uuid
import requests
import validators
from PIL import UnidentifiedImageError
from django.core.files import File
from requests.exceptions import MissingSchema
from rest_framework import decorators, status, viewsets
from rest_framework.exceptions import APIException, PermissionDenied
from rest_framework.parsers import MultiPartParser
from rest_framework.response import Response
from cookbook.helper.image_processing import handle_image
from cookbook.serializer import (AutomationSerializer, BookmarkletImportSerializer,
                                 CookLogSerializer, CustomFilterSerializer, ExportLogSerializer,
                                 FoodInheritFieldSerializer, FoodSerializer,
                                 FoodShoppingUpdateSerializer, ImportLogSerializer,
                                 IngredientSerializer, KeywordSerializer, MealPlanSerializer,
                                 MealTypeSerializer, RecipeBookEntrySerializer,
                                 RecipeBookSerializer, RecipeImageSerializer,
                                 RecipeOverviewSerializer, RecipeSerializer,
                                 RecipeShoppingUpdateSerializer, RecipeSimpleSerializer,
                                 ShoppingListAutoSyncSerializer, ShoppingListEntrySerializer,
                                 ShoppingListRecipeSerializer, ShoppingListSerializer,
                                 StepSerializer, StorageSerializer,
                                 SupermarketCategoryRelationSerializer,
                                 SupermarketCategorySerializer, SupermarketSerializer,
                                 SyncLogSerializer, SyncSerializer, UnitSerializer,
                                 UserFileSerializer, UserNameSerializer, UserPreferenceSerializer,
                                 ViewLogSerializer, IngredientSimpleSerializer, BookmarkletImportListSerializer)



@decorators.action(
    detail=True,
    methods=['PUT'],
    serializer_class=RecipeImageSerializer,
    parser_classes=[MultiPartParser],
)
def img(self, request, pk):
    obj = self.get_object()

    if obj.get_space() != request.space:
        raise PermissionDenied(detail='You do not have the required permission to perform this action', code=403)

    serializer = self.serializer_class(obj, data=request.data, partial=True)

    if serializer.is_valid():
        image = None
        serializer.save()
        filetype = ".jpeg"  # fall-back to .jpeg, even if wrong, at least users will know it's an image and most image viewers can open it correctly anyways

        if 'image' in serializer.validated_data:
            img = obj.image
            v_img=serializer.validated_data['image']
            type=v_img.content_type
            doccategory = mimetypes.guess_extension(type) or filetype
        elif 'image_url' in serializer.validated_data:
            try:
               url


