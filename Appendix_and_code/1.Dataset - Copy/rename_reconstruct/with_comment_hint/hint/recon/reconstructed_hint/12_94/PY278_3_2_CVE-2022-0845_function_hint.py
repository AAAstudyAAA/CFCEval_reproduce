import ast


def preprocess_input_exprs_arg_string(input_exprs_str, safe=True):
    """Parses input arg into dictionary that maps input key to python expression.

    Parses input string in the format of 'input_key=<python expression>' into a
    dictionary that maps each input_key to its python expression.

    Args:
      input_exprs_str: A string that specifies python expression for input keys.
        Each input is separated by semicolon. For each input key:
          'input_key=<python expression>'
      safe: Whether to evaluate the python expression as literals or allow
        arbitrary calls (e.g. numpy usage).

    Returns:
      A dictionary that maps input keys to their values.

    Raises:
      RuntimeError: An error when the given input string is in a bad format.
    """
    input_dict = {}

    # for input_raw in filter(bool, input_exprs_str.split(';')):
    index=0
    while index<len(filter(bool, input_exprs_str.split(';'))):
        input_raw = filter(bool, input_exprs_str.split(';'))[index]
        if '=' not in input_exprs_str:
            raise RuntimeError('--input_exprs "%s" format is incorrect. Please follow'
                               '"<input_key>=<python expression>"' % input_exprs_str)
        input_key, expr = input_raw.split('=', 1)

        if 
        
        index=index+1