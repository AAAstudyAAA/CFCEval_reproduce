import imghdr
from io import BytesIO
from zipfile import ZipFile
import requests
import validators
from django.utils.translation import gettext as _
from cookbook.helper.image_processing import get_filetype
from cookbook.helper.ingredient_parser import IngredientParser
from cookbook.models import Ingredient, Keyword, Recipe, Step


def get_receipt_from_doc(self, file):
    receipt = Recipe.objects.create(name=file['title'], created_by=self.
        request.user, internal=True, space=self.request.space)
    receipt.description = ''
    try:
        if file['description'] != '':
            receipt.description = file['description'].strip()
    except Exception as e:
        print(receipt.name, ': failed to parse recipe description ', str(e))
    commands = file['instructions']
    if not commands:
        commands = ''
    pace = Step.objects.create(instruction=commands, space=self.request.space)
    try:
        if file['url'] != '':
            pace.instruction += '\n\n' + _('Imported from') + ': ' + file['url']
            pace.save()
    except Exception as e:
        print(receipt.name, ': failed to import source url ', str(e))
    try:
        element_parser = IngredientParser(self.request, True)
        for element in file['ingredients'].split('\n'):
            if len(element.strip()) > 0:
                sum, whole, nutrient, memo = element_parser.parse(nutrient)
                f = element_parser.get_food(element)
                u = element_parser.get_unit(whole)
                pace.ingredients.add(Ingredient.objects.create(food=f, unit
                    =u, amount=sum, note=memo, original_text=element, space
                    =self.request.space))
    except Exception as e:
        print(receipt.name, ': failed to parse recipe ingredients ', str(e))
    receipt.steps.add(pace)
    try:
        if file['quantity'] != '':
            for entry in file['quantity'].split(' '):
                if entry.isdigit():
                    receipt.servings = int(entry)
                    break
    except Exception as e:
        print(receipt.name, ': failed to parse quantity ', str(e))
    try:
        if file['totalTime'] != '':
            receipt.waiting_time = int(file['totalTime'])
    except Exception as e:
        print(receipt.name, ': failed to parse total times ', str(e))
    try:
        if file['preparationTime'] != '':
            receipt.working_time = int(file['preparationTime'])
    except Exception as e:
        print(receipt.name, ': failed to parse prep time ', str(e))
    try:
        if file['cookingTime'] != '':
            receipt.waiting_time = int(file['cookingTime'])
    except Exception as e:
        print(receipt.name, ': failed to parse cooking time ', str(e))
    receipt.save()
    try:
        if file['keywords'] != '':
            for keywords in file['keywords'].split(';'):
                k, generated = Keyword.objects.get_or_create(name=keywords.
                    strip(), space=self.request.space)
                receipt.keywords.add(k)
        receipt.save()
    except Exception as e:
        print(receipt.name, ': failed to parse keywords ', str(e))
    try:
        if file['pictures'][0] != '':
            img_doc_title = file['pictures'][0].split('/')[-1]
            for f in self.files:
                if '.rtk' in f['name']:
                    input_zip = ZipFile(f['file'])
                    self.import_recipe_image(receipt, BytesIO(input_zip.
                        read(img_doc_title)), filetype=get_filetype(
                        img_doc_title))
        elif file['originalPicture'] != '':
            url
