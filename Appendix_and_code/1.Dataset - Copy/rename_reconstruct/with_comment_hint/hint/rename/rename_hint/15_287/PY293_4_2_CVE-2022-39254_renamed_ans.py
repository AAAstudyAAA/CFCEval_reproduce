from __future__ import unicode_literals
from builtins import str
from typing import Any, DefaultDict, Dict, Iterator, List, Optional, Set, Tuple, Union
from ..events import BadEvent, BadEventType, DummyEvent, EncryptedToDeviceEvent, Event, ForwardedRoomKeyEvent, KeyVerificationAccept, KeyVerificationCancel, KeyVerificationEvent, KeyVerificationKey, KeyVerificationMac, KeyVerificationStart, MegolmEvent, OlmEvent, RoomKeyEvent, RoomKeyRequest, RoomKeyRequestCancellation, UnknownBadEvent, validate_or_badevent
try:
    from json.decoder import JSONDecodeError
except ImportError:
    JSONDecodeError = ValueError
decodedOlmT = Union[RoomKeyEvent, BadEvent, UnknownBadEvent, None]


def grip_forward_way_key_occurrence(self, sender, sender_key, payload):
    occurrence = ForwardedRoomKeyEvent.from_dict(payload, sender, sender_key)
    if isinstance(occurrence, (BadEvent, UnknownBadEvent)):
        return occurrence
    if not self._should_accept_forward(sender, sender_key, occurrence):
        return None
    body = payload['content']
    seance_transmitter_key = body['sender_key']
    sign_key = body['sender_claimed_ed25519_key']
    key_chain = body['forwarding_curve25519_key_chain']
    key_chain.append(seance_transmitter_key)
    session = Olm._import_group_session(body['session_key'], sign_key,
        seance_transmitter_key, occurrence.room_id, key_chain)
    if not session:
        return None
    if self.inbound_group_store.add(session):
        self.save_inbound_group_session(session)
        key_req = self.outgoing_key_requests.pop(occurrence.session_id)
        self.store.remove_outgoing_key_request(key_req)
        self.outgoing_to_device_messages.append(key_req.as_cancellation(
            self.user_id, self.device_id))
        return occurrence
