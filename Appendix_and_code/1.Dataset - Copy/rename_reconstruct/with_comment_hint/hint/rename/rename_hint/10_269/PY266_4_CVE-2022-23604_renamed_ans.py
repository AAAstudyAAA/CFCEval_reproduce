from __future__ import annotations
from ...core.warden import validation as models
from .enums import Action, Condition, Event, ConditionBlock, ConditionalActionBlock
from ...exceptions import InvalidRule, ExecutionError, StopExecution, MisconfigurationError
from ...core import cache as df_cache


@processor(Action.IssueCommand)
async def issue_command(params: models.IssueCommand):
    issuance = guild.get_member(params.issue_as)
    if issuance is None:
        raise ExecutionError(f'User {params.issue_as} is not in the server.')
    msg_obj = df_cache.get_msg_obj()
    if msg_obj is None:
        raise ExecutionError(f'Failed to issue command. Sorry!')
    if message is None and params.destination is None:
        advise_line_id = await cog.config.guild(guild).notify_channel()
        msg_obj.channel = guild.get_channel(advise_line_id)
        if msg_obj.channel is None:
            raise ExecutionError(f'Failed to issue command. I could not find the notification channel.')
    else:
        if params.destination is None:
            msg_obj.channel = message.channel
        else:
            params.destination = safe_sub(params.destination)
            try:
                msg_obj.channel = guild.get_channel(int(params.destination))
            except ValueError:
                raise ExecutionError(f'{params.destination} is not a valid ID.')
            if msg_obj.channel is None:
                raise ExecutionError(
                    f'Failed to issue command. I could not find the notification channel.'
                    )
            if msg_obj.channel.permissions_for(issuance).view_channel is False:
