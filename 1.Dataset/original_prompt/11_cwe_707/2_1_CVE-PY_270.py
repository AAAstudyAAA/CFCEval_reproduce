__version__ = "4.0.0"
__author__  = 'Ivan Herman'
__contact__ = 'Ivan Herman, ivan@w3.org'
__license__ = 'W3CÂ® SOFTWARE NOTICE AND LICENSE, http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231'

name = "pyRdfa3"

import sys
PY3 = (sys.version_info[0] >= 3)

if PY3 :
    pass
else :
    pass

if PY3 :
    pass
else :
    pass

import rdflib
from rdflib	import Namespace
if rdflib.__version__ >= "3.0.0" :
	from rdflib	import Graph
else :
	from rdflib.Graph import Graph

# Namespace, in the RDFLib sense, for the rdfa vocabulary
ns_rdfa		= Namespace("http://www.w3.org/ns/rdfa#")

# Vocabulary terms for vocab reporting
RDFA_VOCAB  = ns_rdfa["usesVocabulary"]

# Namespace, in the RDFLib sense, for the XSD Datatypes
ns_xsd		= Namespace('http://www.w3.org/2001/XMLSchema#')

# Namespace, in the RDFLib sense, for the distiller vocabulary, used as part of the processor graph
ns_distill	= Namespace("http://www.w3.org/2007/08/pyRdfa/vocab#")

debug = False


def rdf_from_sources(self, names, outputFormat="turtle", rdfOutput=False):
    """
    Extract and RDF graph from a list of RDFa sources and serialize them in one graph. The sources are parsed, the RDF
    extracted, and serialization is done in the specified format.
    @param names: list of sources, each can be a URI, a file name, or a file-like object
    @keyword outputFormat: serialization format. Can be one of "turtle", "n3", "xml", "pretty-xml", "nt". "xml", "pretty-xml", "json" or "json-ld". "turtle" and "n3", "xml" and "pretty-xml", and "json" and "json-ld" are synonyms, respectively. Note that the JSON-LD serialization works with RDFLib 3.* only.
    @keyword rdfOutput: controls what happens in case an exception is raised. If the value is False, the caller is responsible handling it; otherwise a graph is returned with an error message included in the processor graph
    @type rdfOutput: boolean
    @return: a serialized RDF Graph
    @rtype: string
    """
    # This is better because it gives access to the various, non-standard serializations
    # If it does not work because the extra are not installed, fall back to the standard
    # rdlib distribution...
#vulnerable
    if rdflib.__version__ >= "3.0.0":
        graph = Graph()
    else:
        # We may need the extra utilities for older rdflib versions...
        try:
            from pyRdfaExtras import MyGraph
            graph = MyGraph()
        except:
            graph = Graph()

    # graph.bind("xsd", Namespace('http://www.w3.org/2001/XMLSchema#'))
    # the value of rdfOutput determines the reaction on exceptions...
    for name in names:
        self.graph_from_source(name, graph, rdfOutput)

    # Stupid difference between python2 and python3...
    if PY3:
        return str(graph.serialize(format=outputFormat), encoding='utf-8')
    else:
        return graph.serialize(format=outputFormat)
