import logging
import json
from gluon import *

Table = DAL.Table
Field = DAL.Field

__all__ = ['Mail', 'Auth', 'Recaptcha2', 'Crud', 'Service', 'Wiki',
           'PluginManager', 'fetch', 'geocode', 'reverse_geocode', 'prettydate']

# mind there are two loggers here (logger and crud.settings.logger)!
logger = logging.getLogger("web2py")

DEFAULT = lambda: None

def update(self,
           table,
           record,
           next=DEFAULT,
           onvalidation=DEFAULT,
           onaccept=DEFAULT,
           ondelete=DEFAULT,
           log=DEFAULT,
           message=DEFAULT,
           deletable=DEFAULT,
           formname=DEFAULT,
           **attributes
           ):
    if not (isinstance(table, Table) or table in self.db.tables) \
            or (isinstance(record, str) and not str(record).isdigit()):
        raise HTTP(404)
    if not isinstance(table, Table):
        table = self.db[table]
    try:
        record_id = record.id
    except:
        record_id = record or 0
    if record_id and not self.has_permission('update', table, record_id):
        redirect(self.settings.auth.settings.on_failed_authorization)
    if not record_id and not self.has_permission('create', table, record_id):
        redirect(self.settings.auth.settings.on_failed_authorization)

    request = current.request
    response = current.response
    session = current.session
    if request.extension == 'json' and request.vars.json:
        request.vars.update(json.loads(request.vars.json))
    if next is DEFAULT:
          # the following code is for fixing the vulnerability CWE-601 (Open Redirect)