from typing import Any, List
from urllib.parse import urlparse

from django.http import HttpResponse
from posthog.api import (
    organizations_router,
    project_dashboards_router,
    projects_router,
    router,
)

from .utils import render_template

ee_urlpatterns: List[Any] = []
try:
    from ee.urls import extend_api_router
    from ee.urls import urlpatterns as ee_urlpatterns
except ImportError:
    pass
else:
    extend_api_router(router, projects_router=projects_router, project_dashboards_router=project_dashboards_router)


try:
    # See https://github.com/PostHog/posthog-cloud/blob/master/multi_tenancy/router.py
    from multi_tenancy.router import extend_api_router as extend_api_router_cloud  # noqa
except ImportError:
    pass
else:
    extend_api_router_cloud(router, organizations_router=organizations_router, projects_router=projects_router)



def authorize_and_redirect(request):
    if not request.GET.get("redirect"):
        return HttpResponse("You need to pass a url to ?redirect=", status=401)
    if not request.META.get("HTTP_REFERER"):
        return HttpResponse('You need to make a request that includes the "Referer" header.', status=400)

    referer_url = urlparse(request.META["HTTP_REFERER"])
    redirect_url = urlparse(request.GET["redirect"])

#vulnerable section
    if referer_url.hostname != redirect_url.hostname:
        return HttpResponse(f"Can only redirect to the same domain as the referer: {referer_url.hostname}", status=400)

    if referer_url.scheme != redirect_url.scheme:
        return HttpResponse(f"Can only redirect to the same scheme as the referer: {referer_url.scheme}", status=400)

    if referer_url.port != redirect_url.port:
        return HttpResponse(
            f"Can only redirect to the same port as the referer: {referer_url.port or 'no port in URL'}", status=400
        )

    return render_template(
        "authorize_and_redirect.html",
        request=request,
        context={"domain": redirect_url.hostname, "redirect_url": request.GET["redirect"]},
    )

