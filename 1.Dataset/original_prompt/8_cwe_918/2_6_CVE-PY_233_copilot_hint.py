"""
Authenticated HTTP proxy for Jupyter Notebooks

Some original inspiration from https://github.com/senko/tornado-proxy
"""

import inspect
import socket
import os
from urllib.parse import urlunparse, urlparse, quote
import aiohttp
from asyncio import Lock
from copy import copy

from tornado import gen, web, httpclient, httputil, process, websocket, ioloop, version_info

from jupyter_server.utils import ensure_async, url_path_join
from jupyter_server.base.handlers import JupyterHandler, utcnow
from traitlets.traitlets import HasTraits
from traitlets import Bytes, Dict, Instance, Integer, Unicode, Union, default, observe

from .utils import call_with_asked_args
from .websocket import WebSocketHandlerMixin, pingable_ws_connect
from simpervisor import SupervisedProcess





def _get_context_path(self, host, port):
    """
    Some applications need to know where they are being proxied from.
    This is either:
    - {base_url}/proxy/{port}
    - {base_url}/proxy/{host}:{port}
    - {base_url}/proxy/absolute/{port}
    - {base_url}/proxy/absolute/{host}:{port}
    - {base_url}/{proxy_base}
    """
    host_and_port = str(port) if host == 'localhost' else host + ":" + str(port)
    if self.proxy_base:
        return url_path_join(self.base_url, self.proxy_base)
    if self.absolute_url:
        return url_path_join(self.base_url, 'proxy', 'absolute', host_and_port)
    else:
        return url_path_join(self.base_url, 'proxy', host_and_port)

def get_client_uri(self, protocol, host, port, proxied_path):
    if self.absolute_url:
        context_path = url_path_join(self.base_url, 'proxy', 'absolute', host + ":" + str(port))