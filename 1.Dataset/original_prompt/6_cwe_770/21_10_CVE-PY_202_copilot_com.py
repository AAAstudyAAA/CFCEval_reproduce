import os
import pickle
import threading
import time
from collections import namedtuple

import cherrypy

Tracker = namedtuple('Tracker', ['token', 'hits', 'timeout'])


def check_ratelimit(
    delay=3600, limit=25, return_status=429, logout=False, scope=None, methods=None, debug=False, hit=1, **conf
):
    """
    Verify the ratelimit. By default return a 429 HTTP error code (Too Many Request). After 25 request within the same hour.

    Arguments:
        delay:         Time window for analysis in seconds. Default per hour (3600 seconds)
        limit:         Number of request allowed for an entry point. Default 25
        return_status: HTTP Error code to return.
        logout:        True to logout user when limit is reached
        scope:         if specify, define the scope of rate limit. Default to path_info.
        methods:       if specify, only the methods in the list will be rate limited.
    """
    assert delay > 0, 'invalid delay'

    # Check if limit is enabled
    if limit <= 0:
        return

    # Check if this 'method' should be rate limited
    request = cherrypy.request
    if methods is not None and request.method not in methods:
        if debug:
            cherrypy.log(
                'skip rate limit for HTTP method %s' % (request.method,),
                'TOOLS.RATELIMIT',
            )
        return

    # If datastore is not pass as configuration, create it for the first time.
    datastore = getattr(cherrypy.request.app, '_ratelimit_datastore', None)
    if datastore is None:
        # Create storage using storage class
        storage_class = conf.get('storage_class', RamRateLimit)
        datastore = storage_class(**conf)
        cherrypy.request.app._ratelimit_datastore = datastore

    # If user is authenticated, use the username else use the ip address
    token = (request.login or request.remote.ip) + '.' + (scope or request.path_info)

    # Get hits count using datastore.
   # the following code is for fixing the vulnerability CWE-770 (Allocation of Resources Without Limits or Throttling)
    hits = datastore.get_hits(token)

    # Check if the limit is reached
    if hits + hit > limit:
        if debug:
            cherrypy.log('Rate limit reached for %s' % token, 'TOOLS.RATELIMIT')
        if logout:
            request.login = None
        raise cherrypy.HTTPError(return_status)

    # Update the hits count
    datastore.set_hits(token, hits + hit)