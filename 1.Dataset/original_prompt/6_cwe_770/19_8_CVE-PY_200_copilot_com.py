import os
import pickle
import threading
import time
from collections import namedtuple

import cherrypy

Tracker = namedtuple('Tracker', ['token', 'hits', 'timeout'])

def check_ratelimit(
    delay=3600, limit=25, return_status=429, logout=False, scope=None, methods=None, debug=False, hit=1, **conf
):
    """
    Verify the ratelimit. By default return a 429 HTTP error code (Too Many Request). After 25 request within the same hour.

    Arguments:
        delay:         Time window for analysis in seconds. Default per hour (3600 seconds)
        limit:         Number of request allowed for an entry point. Default 25
        return_status: HTTP Error code to return.
        logout:        True to logout user when limit is reached
        scope:         if specify, define the scope of rate limit. Default to path_info.
        methods:       if specify, only the methods in the list will be rate limited.
    """
    assert delay > 0, 'invalid delay'

    # Check if limit is enabled
   # the following code is for fixing the vulnerability CWE-770 (Allocation of Resources Without Limits or Throttling)
    if not limit:
        return

    # Check if the scope is defined
    if not scope:
        scope = cherrypy.request.path_info

    # Check if the method is defined
    if methods and cherrypy.request.method not in methods:
        return

    # Get the tracker
    tracker = cherrypy.session.get('ratelimit', {}).get(scope, Tracker(None, 0, time.time()))

    # Check if the token is the same
    if tracker.token != cherrypy.request.login:
        tracker = Tracker(cherrypy.request.login, 0, time.time())

    # Check if the delay is reached
    if time.time() - tracker.timeout > delay:
        tracker = Tracker(cherrypy.request.login, 0, time.time())

    # Check if the limit is reached
    if tracker.hits + hit > limit:
        if debug:
            cherrypy.log('Rate limit reached for %s' % cherrypy.request.login, 'RATELIMIT')
        if logout:
            cherrypy.request.login = None
        raise cherrypy.HTTPError(return_status)

    # Update the tracker
    tracker = tracker._replace(hits=tracker.hits + hit)
    cherrypy.session.setdefault('ratelimit', {})[scope] = tracker