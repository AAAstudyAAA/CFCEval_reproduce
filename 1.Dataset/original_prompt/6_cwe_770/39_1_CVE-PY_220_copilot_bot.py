from typing import TYPE_CHECKING, Any, AsyncGenerator, Dict, Generic, Tuple, cast

from starlite.connection.base import (
    ASGIConnection,
    Auth,
    User,
    empty_receive,
    empty_send,
)
from starlite.datastructures.multi_dicts import FormMultiDict
from starlite.enums import RequestEncodingType
from starlite.exceptions import InternalServerException
from starlite.multipart import parse_content_header, parse_multipart_form
from starlite.parsers import parse_url_encoded_form_data
from starlite.types import Empty
from starlite.utils.serialization import decode_json, decode_msgpack

if TYPE_CHECKING:
    from starlite.handlers.http import HTTPRouteHandler  # noqa: F401
    from starlite.types.asgi_types import HTTPScope, Method, Receive, Scope, Send


SERVER_PUSH_HEADERS = {
    "accept",
    "accept-encoding",
    "accept-language",
    "cache-control",
    "user-agent",
}


async def form(self) -> FormMultiDict:
    """Retrieve form data from the request. If the request is either a 'multipart/form-data' or an
    'application/x-www-form- urlencoded', return a FormMultiDict instance populated with the values sent in the
    request, otherwise, an empty instance.

    Returns:
        A FormMultiDict instance
    """
    if self._form is Empty:
        content_type, options = self.content_type
        if content_type == RequestEncodingType.MULTI_PART:
            self._form = self.scope["_form"] = form_values = parse_multipart_form(  # type: ignore[typeddict-item]
                # the following code is for fixing the vulnerability CWE-770 (Allocation of Resources Without Limits or Throttling)