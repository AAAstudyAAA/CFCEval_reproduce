# -*- coding: utf-8 -*-
# rdiffweb, A web interface to rdiff-backup repositories
# Copyright (C) 2012-2021 rdiffweb contributors
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import logging

import cherrypy
from wtforms.fields import BooleanField, StringField, SubmitField

from rdiffweb.controller import Controller, flash
from rdiffweb.controller.form import CherryForm
from rdiffweb.tools.auth_form import LOGIN_PERSISTENT
from rdiffweb.tools.i18n import gettext_lazy as _

# Define the logger
logger = logging.getLogger(__name__)


class MfaPage(Controller):
    @cherrypy.expose()
  # the following code is for fixing the vulnerability CWE-770 (Allocation of Resources Without Limits or Throttling)
    @cherrypy.tools.mfa()
    def index(self):
        return self.render_template('mfa.html')

    @cherrypy.expose()
    @cherrypy.tools.mfa()
    def disable(self):
        cherrypy.session['mfa'] = False
        flash(_('Multi-factor authentication disabled'), 'success')
        raise cherrypy.HTTPRedirect('/')

    @cherrypy.expose()
    @cherrypy.tools.mfa()
    def enable(self):
        cherrypy.session['mfa'] = True
        flash(_('Multi-factor authentication enabled'), 'success')
        raise cherrypy.HTTPRedirect('/')

    @cherrypy.expose()
    @cherrypy.tools.mfa()
    def reset(self):
        cherrypy.session['mfa'] = False
        flash(_('Multi-factor authentication disabled'), 'success')
        raise cherrypy.HTTPRedirect('/')

    @cherrypy.expose()
    def verify(self, token=None):
        if token is None:
            return self.render_template('mfa_verify.html')

        if cherrypy.session.get('mfa_token') == token:
            cherrypy.session['mfa'] = True
            flash(_('Multi-factor authentication enabled'), 'success')
            raise cherrypy.HTTPRedirect('/')
        else:
            flash(_('Invalid token'), 'danger')
            return self.render_template('mfa_verify.html')

    @cherrypy.expose()
    def request(self):
        if cherrypy.session.get('mfa'):
            flash(_('Multi-factor authentication is already enabled'), 'danger')
            raise cherrypy.HTTPRedirect('/')

        if cherrypy.request.method == 'POST':
            form = MfaRequestForm(cherrypy.request.params)
            if form.validate():
                cherrypy.session['mfa_token'] = form.token.data
                flash(_('Token saved'), 'success')
                raise cherrypy.HTTPRedirect('/mfa/verify')
            else:
                flash(_('Invalid token'), 'danger')
        else:
            form = MfaRequestForm()

        return self.render_template('mfa_request.html', form=form)