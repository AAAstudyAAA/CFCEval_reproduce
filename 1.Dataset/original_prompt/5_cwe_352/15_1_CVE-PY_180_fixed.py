from reversion import revisions as reversion
from django.contrib.auth.decorators import (
    login_required, permission_required, user_passes_test
)
from django.views.decorators.http import require_http_methods
from modoboa.lib.exceptions import PermDeniedException
from .. import signals
from ..forms import DomainForm, DomainWizard
from ..models import Domain, Mailbox

@login_required
@permission_required("admin.view_domain")
# fixed
@require_http_methods(["POST"])
# fixed
@reversion.create_revision()
def editdomain(request, dom_id):
    """Edit domain view."""
    domain = Domain.objects.get(pk=dom_id)
    if not request.user.can_access(domain):
        raise PermDeniedException

    instances = {"general": domain}
    results = signals.get_domain_form_instances.send(
        sender="editdomain", user=request.user, domain=domain)
    for result in results:
        instances.update(result[1])
    return DomainForm(request, instances=instances).process()