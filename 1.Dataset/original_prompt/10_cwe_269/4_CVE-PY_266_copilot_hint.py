"""
Defender - Protects your community with automod features and
           empowers the staff and users you trust with
           advanced moderation tools
Copyright (C) 2020-present  Twentysix (https://github.com/Twentysix26/)
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

from __future__ import annotations
from ...core.warden import validation as models
from .enums import Action, Condition, Event, ConditionBlock, ConditionalActionBlock
from ...exceptions import InvalidRule, ExecutionError, StopExecution, MisconfigurationError
from ...core import cache as df_cache
from typing import TYPE_CHECKING
import discord
import logging
import regex as re

if TYPE_CHECKING:
    from ...abc import MixinMeta

log = logging.getLogger("red.x26cogs.defender")

ALLOW_ALL_MENTIONS = discord.AllowedMentions(everyone=True, roles=True, users=True)
RULE_REQUIRED_KEYS = ("name", "event", "rank", "if", "do")
RULE_FACULTATIVE_KEYS = ("priority", "run-every")

MEDIA_URL_RE = re.compile(r"""(http)?s?:?(\/\/[^"']*\.(?:png|jpg|jpeg|gif|png|svg|mp4|gifv))""", re.I)
URL_RE = re.compile(r"""https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)""", re.I)


@processor(Action.IssueCommand)
async def issue_command(params: models.IssueCommand):
    issuer = guild.get_member(params.issue_as)
    if issuer is None:
        raise ExecutionError(f"User {params.issue_as} is not in the server.")
    msg_obj = df_cache.get_msg_obj()
    if msg_obj is None:
        raise ExecutionError(f"Failed to issue command. Sorry!")

    # User id + command in a non-message context
    if message is None and params.destination is None:
        notify_channel_id = await cog.config.guild(guild).notify_channel()
        msg_obj.channel = guild.get_channel(notify_channel_id)
        if msg_obj.channel is None:
            raise ExecutionError(f"Failed to issue command. I could not find the "
                                 "notification channel.")
    else:
        if params.destination is None: # User id + command in a message context
            msg_obj.channel = message.channel
        else: # User id + command + arbitrary destination
            params.destination = safe_sub(params.destination)
            try:
                msg_obj.channel = guild.get_channel(int(params.destination))
            except ValueError:
                raise ExecutionError(f"{params.destination} is not a valid ID.")
            if msg_obj.channel is None:
                raise ExecutionError(f"Failed to issue command. I could not find the "
                                     "notification channel.")
            if not isinstance(msg_obj.channel, discord.TextChannel):
                raise ExecutionError(f"Failed to issue command. The destination "
                                     "channel is not a text channel.")