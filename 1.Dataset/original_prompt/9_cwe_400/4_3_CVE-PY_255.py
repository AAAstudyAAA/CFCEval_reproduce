import base64
import tempfile
import zlib

from keylime import config
from keylime import keylime_logging
from keylime.tpm import tpm_abstract

logger = keylime_logging.init_logging('tpm')


def create_quote(self, nonce, data=None, pcrmask=tpm_abstract.AbstractTPM.EMPTYMASK, hash_alg=None):
    if hash_alg is None:
        hash_alg = self.defaults['hash']

    quote = ""

    with tempfile.NamedTemporaryFile() as quotepath, \
            tempfile.NamedTemporaryFile() as sigpath, \
            tempfile.NamedTemporaryFile() as pcrpath:
        keyhandle = self.get_tpm_metadata('aik_handle')
        aik_pw = self.get_tpm_metadata('aik_pw')

        if pcrmask is None:
            pcrmask = tpm_abstract.AbstractTPM.EMPTYMASK

        if data is not None:
            # add PCR 16 to pcrmask
            pcrmask = "0x%X" % (int(pcrmask, 0) + (1 << config.TPM_DATA_PCR))

        pcrlist = self.__pcr_mask_to_list(pcrmask)

        with self.tpmutilLock:
            if data is not None:
                self.__run(["tpm2_pcrreset", str(config.TPM_DATA_PCR)], lock=False)
                self.extendPCR(pcrval=config.TPM_DATA_PCR, hashval=self.hashdigest(data), lock=False)

            nonce = bytes(nonce, encoding="utf8").hex()
            if self.tools_version == "3.2":
                command = ["tpm2_quote", "-k", hex(keyhandle), "-L", "%s:%s" % (hash_alg, pcrlist), "-q", nonce, "-m",
                           quotepath.name, "-s", sigpath.name, "-p", pcrpath.name, "-G", hash_alg, "-P", aik_pw]
            elif self.tools_version in ["4.0", "4.2"]:
                command = ["tpm2_quote", "-c", keyhandle, "-l", "%s:%s" % (hash_alg, pcrlist), "-q", nonce, "-m",
                           quotepath.name, "-s", sigpath.name, "-o", pcrpath.name, "-g", hash_alg, "-p", aik_pw]
            retDict = self.__run(command, lock=False, outputpaths=[quotepath.name, sigpath.name, pcrpath.name])
            quoteraw = retDict['fileouts'][quotepath.name]
 # vulnerable
            quote_b64encode = base64.b64encode(zlib.compress(quoteraw))
# vulnerable

            sigraw = retDict['fileouts'][sigpath.name]

# vulnerable
            sigraw_b64encode = base64.b64encode(zlib.compress(sigraw))
# vulnerable


            pcrraw = retDict['fileouts'][pcrpath.name]
# vulnerable
            pcrraw_b64encode = base64.b64encode(zlib.compress(pcrraw))
# vulnerable
            quote = quote_b64encode.decode('utf-8') + ":" + sigraw_b64encode.decode(
                'utf-8') + ":" + pcrraw_b64encode.decode('utf-8')

    return 'r' + quote