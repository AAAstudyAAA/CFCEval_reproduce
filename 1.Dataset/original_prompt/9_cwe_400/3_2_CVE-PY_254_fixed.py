#!/usr/bin/python3

'''
SPDX-License-Identifier: Apache-2.0
Copyright 2017 Massachusetts Institute of Technology.
'''

import argparse
import base64
import hashlib
import io
import logging
import os
import subprocess
import sys
import json
from cryptography.hazmat.primitives import serialization as crypto_serialization
from keylime.agentstates import AgentAttestState
from keylime import config
from keylime import keylime_logging
from keylime import registrar_client
from keylime.tpm import tpm2_objects


# setup logging
logger = keylime_logging.init_logging('tenant')



def validate_tpm_quote(self, public_key, quote, hash_alg):
    """ Validate TPM Quote received from the Agent

    Arguments:
        public_key {[type]} -- [description]
        quote {[type]} -- [description]
        hash_alg {bool} -- [description]

    Raises:
        UserError: [description]

    Returns:
        [type] -- [description]
    """
    registrar_client.init_client_tls('tenant')
    if self.registrar_data is None:
        logger.warning("AIK not found in registrar, quote not validated")
        return False

# fixed
    failure = self.tpm_instance.check_quote(AgentAttestState(self.agent_uuid), self.nonce, public_key, quote,
                                            self.registrar_data['aik_tpm'], hash_alg=hash_alg,
                                            compressed=(self.supported_version == "1.0"))

# fixed

    if failure:
        if self.registrar_data['regcount'] > 1:
            logger.error("WARNING: This UUID had more than one ek-ekcert registered to it! This might indicate that your system is misconfigured or a malicious host is present. Run 'regdelete' for this agent and restart")
            sys.exit()
        return False

    if self.registrar_data['regcount'] > 1:
        logger.warning("WARNING: This UUID had more than one ek-ekcert registered to it! This might indicate that your system is misconfigured. Run 'regdelete' for this agent and restart")

    if not config.STUB_TPM and (not config.getboolean('tenant', 'require_ek_cert') and config.get('tenant', 'ek_check_script') == ""):
        logger.warning(
            "DANGER: EK cert checking is disabled and no additional checks on EKs have been specified with ek_check_script option. Keylime is not secure!!")

    # check EK cert and make sure it matches EK
    if not self.check_ek(self.registrar_data['ekcert']):
        return False
    # if agent is virtual, check phyisical EK cert and make sure it matches phyiscal EK
    if 'provider_keys' in self.registrar_data:
        if not self.check_ek(self.registrar_data['provider_keys']['ekcert']):
            return False

    # check all EKs with optional script:
    script = config.get('tenant', 'ek_check_script')
    if not script:
        return True

    if script[0] != '/':
        script = os.path.join(config.WORK_DIR, script)

    logger.info("Checking EK with script %s", script)
    # now we need to exec the script with the ek and ek cert in vars
    env = os.environ.copy()
    env['AGENT_UUID'] = self.agent_uuid
    env['EK'] = tpm2_objects.pubkey_from_tpm2b_public(
        base64.b64decode(self.registrar_data['ek_tpm']),
    ).public_bytes(
        crypto_serialization.Encoding.PEM,
        crypto_serialization.PublicFormat.SubjectPublicKeyInfo,
    )
    env['EK_TPM'] = self.registrar_data['ek_tpm']
    if self.registrar_data['ekcert'] is not None:
        env['EK_CERT'] = self.registrar_data['ekcert']
    else:
        env['EK_CERT'] = ""

    env['PROVKEYS'] = json.dumps(self.registrar_data.get('provider_keys', {}))
    proc = subprocess.Popen(script, env=env, shell=True,
                            cwd=config.WORK_DIR, stdout=subprocess.PIPE,
                            stderr=subprocess.STDOUT)
    retval = proc.wait()
    if retval != 0:
        raise UserError("External check script failed to validate EK")
    logger.debug("External check script successfully to validated EK")
    while True:
        line = proc.stdout.readline().decode()
        if line == "":
            break
        logger.debug("ek_check output: %s", line.strip())
    return True
