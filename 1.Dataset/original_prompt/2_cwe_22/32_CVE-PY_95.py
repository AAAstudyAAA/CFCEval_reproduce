#
#  The OpenDiamond Platform for Interactive Search
#
#  Copyright (c) 2018 Carnegie Mellon University
#  All rights reserved.
#
#  This software is distributed under the terms of the Eclipse Public
#  License, Version 1.0 which can be found in the file named LICENSE.
#  ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS SOFTWARE CONSTITUTES
#  RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT
#
"""
Pre-conditions:
Metadata of a data set is stored in a table <dataset> in a MySQL database.
Files (objects) belonging to a dataset are stored under DATAROOT/<dataset>/.
MySQL table stores relative path to the above directory.
Table provides keyword search to get list of objects.
Database login info is obtained from DiamondConfig.
MySQL table is indexed with:
 FULLTEXT (title, keywords, description)

Requires:
pip install mysql-connector-python==8.0.6
"""
import logging
import os
from xml.sax.saxutils import quoteattr

import mysql.connector
from flask import url_for

BASEURL = 'yfcc100m_mysql'
STYLE = False
LOCAL_OBJ_URI = True  # if true, return local path, otherwise http.
DATAROOT = None
DB_HOST = DB_DBNAME = DB_USER = DB_PASSWORD = DB_PORT = None

_log = logging.getLogger(__name__)

yfcc100m_s3_image_prefix = 'https://multimedia-commons.s3-us-west-2.amazonaws.com/data/images/'



def _get_object_element(dataset, seq_no, rel_path, download_link):
    """If rel_path and download_link are not None, we are called from scope.
    Otherwise we are called from ID and need to run SQL query to fetch these attrs."""

    if rel_path is None:
        query = "SELECT rel_path, download_link FROM " + \
        dataset + \
        " WHERE sequence_no = %s"

        cnx = mysql.connector.connect(user=DB_USER,
                                    password=DB_PASSWORD,
                                    host=DB_HOST,
                                    database=DB_DBNAME,
                                    port=DB_PORT)
        cursor = cnx.cursor()
        cursor.execute(query, (seq_no,))

        row = cursor.fetchone()

        if not row:
            return None

        rel_path, download_link = row[0], row[1]

    if LOCAL_OBJ_URI:
        #vulnerable
        src_uri = 'file://' + os.path.join(DATAROOT, dataset, rel_path)
        # vulnerable
    else:
        src_uri = url_for('.get_object_src_http', dataset=dataset, rel_path=rel_path)

    return '<object id={} src={} hyperfind.external-link={} />' \
        .format(
        quoteattr(url_for('.get_object_id', dataset=dataset, seq_no=seq_no)),
        quoteattr(src_uri),
        quoteattr(download_link))