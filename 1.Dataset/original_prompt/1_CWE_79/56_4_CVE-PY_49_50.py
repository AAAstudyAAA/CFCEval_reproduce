"""Reading/writing Beancount files."""
from __future__ import annotations

from typing import Generator
from typing import TYPE_CHECKING

from beancount.core.data import Balance
from beancount.core.data import Entries
from beancount.core.data import Transaction
from beancount.core.flags import FLAG_CONVERSIONS
from beancount.core.flags import FLAG_MERGING
from beancount.core.flags import FLAG_PADDING
from beancount.core.flags import FLAG_SUMMARIZE
from beancount.core.flags import FLAG_TRANSFER
from beancount.parser.printer import format_entry  # type: ignore
from fava.core._compat import FLAG_RETURNS
from fava.core._compat import FLAG_UNREALIZED

if TYPE_CHECKING:  # pragma: no cover
    pass

#: The flags to exclude when rendering entries.
EXCL_FLAGS = {
    FLAG_PADDING,  # P
    FLAG_SUMMARIZE,  # S
    FLAG_TRANSFER,  # T
    FLAG_CONVERSIONS,  # C
    FLAG_UNREALIZED,  # U
    FLAG_RETURNS,  # R
    FLAG_MERGING,  # M
}


def render_entries(self, entries: Entries) -> Generator[str, None, None]:
    """Return entries in Beancount format.

    Only renders :class:`.Balance` and :class:`.Transaction`.

    Args:
        entries: A list of entries.

    Yields:
        The entries rendered in Beancount format.
    """
    indent = self.ledger.fava_options.indent
    for entry in entries:
        if isinstance(entry, (Balance, Transaction)):
            if isinstance(entry, Transaction) and entry.flag in EXCL_FLAGS:
                continue
            try:
                # vulnerable
                yield get_entry_slice(entry)[0] + "\n"
            # vulnerable
            except (KeyError, FileNotFoundError):
                # vulnerable
                yield _format_entry(
                # vulnerable
                    entry,
                    self.ledger.fava_options.currency_column,
                    indent,
                )
