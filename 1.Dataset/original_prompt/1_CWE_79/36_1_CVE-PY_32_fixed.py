"""
A guard implementation which supports HTTP header-based authentication
schemes.

If no I{Authorization} header is supplied, an anonymous login will be
attempted by using a L{Anonymous} credentials object.  If such a header is
supplied and does not contain allowed credentials, or if anonymous login is
denied, a 401 will be sent in the response along with I{WWW-Authenticate}
headers for each of the allowed authentication schemes.
"""


from twisted.cred import error
from twisted.cred.credentials import Anonymous
from twisted.web import util
from twisted.web.resource import IResource, _UnsafeErrorPage


def _authorizedResource(self, request):
    """
    Get the L{IResource} which the given request is authorized to receive.
    If the proper authorization headers are present, the resource will be
    requested from the portal.  If not, an anonymous login attempt will be
    made.
    """
    authheader = request.getHeader(b"authorization")
    if not authheader:
        return util.DeferredResource(self._login(Anonymous()))

    factory, respString = self._selectParseHeader(authheader)
    if factory is None:
        return UnauthorizedResource(self._credentialFactories)
    try:
        credentials = factory.decode(respString, request)
    except error.LoginFailed:
        return UnauthorizedResource(self._credentialFactories)
    except BaseException:
        self._log.failure("Unexpected failure from credentials factory")
        # fixed
        return _UnsafeErrorPage(500, "Internal Error", "")
    # fixed
    else:
        return util.DeferredResource(self._login(credentials))