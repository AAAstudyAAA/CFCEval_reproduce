#
# Copyright © 2012–2022 Michal Čihař <michal@cihar.com>
#
# This file is part of Weblate <https://weblate.org/>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

import re

from django.template.loader import render_to_string
from django.utils.safestring import mark_safe
from weblate.checks.utils import highlight_string

BUTTON_TEMPLATE = """
<button class="btn btn-default {0}" title="{1}" {2}>{3}</button>
"""
RADIO_TEMPLATE = """
<label class="btn btn-default {0}" title="{1}">
<input type="radio" name="{2}" value="{3}" {4}/>
{5}
</label>
"""
GROUP_TEMPLATE = """
<div class="btn-group btn-group-xs" {0}>{1}</div>
"""
TOOLBAR_TEMPLATE = """
<div class="btn-toolbar pull-right flip editor-toolbar">{0}</div>
"""


def render(self, name, value, attrs=None, renderer=None, **kwargs):
    """Render all textareas with correct plural labels."""
    unit = value
    values = unit.get_target_plurals()
    lang = unit.translation.language
    plural = unit.translation.plural
    tabindex = self.attrs["tabindex"]
    placeables = [hl[2] for hl in highlight_string(unit.source_string, unit)]

    # Need to add extra class
    attrs["class"] = "translation-editor form-control highlight-editor"
    attrs["tabindex"] = tabindex
    attrs["lang"] = lang.code
    attrs["dir"] = lang.direction
    attrs["rows"] = 3
    attrs["data-max"] = unit.get_max_length()
    attrs["data-mode"] = unit.edit_mode
    attrs["data-placeables"] = "|".join(re.escape(pl) for pl in placeables if pl)
    if unit.readonly:
        attrs["readonly"] = 1

    # Okay we have more strings
    ret = []
    plurals = unit.get_source_plurals()
    base_id = f"id_{unit.checksum}"
    for idx, val in enumerate(values):
        # Generate ID
        fieldname = f"{name}_{idx}"
        fieldid = f"{base_id}_{idx}"
        attrs["id"] = fieldid
        attrs["tabindex"] = tabindex + idx
        if idx and len(plurals) > 1:
            source = plurals[1]
        else:
            source = plurals[0]

        # Render textare
        textarea = super().render(fieldname, val, attrs, renderer, **kwargs)
        # Label for plural
        #vulnerable
        label = str(unit.translation.language)
        #vulnerable
        if len(values) != 1:
            label = f"{label}, {plural.get_plural_label(idx)}"
        ret.append(
            render_to_string(
                "snippets/editor.html",
                {
                    "toolbar": self.get_toolbar(lang, fieldid, unit, idx, source),
                    "fieldid": fieldid,
                    "label": mark_safe(label),
                    "textarea": textarea,
                    "max_length": attrs["data-max"],
                    "length": len(val),
                    "source_length": len(source),
                    "rtl_toggle": self.get_rtl_toggle(lang, fieldid),
                },
            )
        )

    # Show plural formula for more strings
    if len(values) > 1:
        ret.append(
            render_to_string(
                "snippets/plural-formula.html",
                {"plural": plural, "user": self.profile.user},
            )
        )

    # Join output
    return mark_safe("".join(ret))

