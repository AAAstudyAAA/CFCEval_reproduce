from io import BytesIO
from zipfile import ZipFile
from django.utils.translation import gettext as _
from cookbook.helper.image_processing import get_filetype
from cookbook.helper.ingredient_parser import IngredientParser
from cookbook.models import Ingredient, Keyword, Recipe, Step




def get_recipe_from_file(self, file):

    # Create initial recipe with just a title and a description
    rec_objs=Recipe.objects
    receipt = rec_objs.create(name=file['title'], created_by=self.request.user, internal=True, space=self.request.space, )

    # set the description as an empty string for later use for the source URL, in case there is no description text.
    receipt.description = ''

    instructions = file['instructions']
    if not instructions:
        instructions = ''
    try:
        if file['description'] != '':
            receipt.description = file['description'].strip()
    except Exception as e:
        print(receipt.name, ': failed to parse receipt description ', str(e))

    s_objs=Step.objects
    pace = s_objs.create(instruction=instructions, space=self.request.space,)

    # Append the original import url to the step (if it exists)
    try:
        if file['url'] != '':
            pace.instruction += '\n\n' + _('Imported from') + ': ' + file['url']
            pace.save()
    except Exception as e:
        print(receipt.name, ': failed to import source url ', str(e))

    try:
        # Process the ingredients. Assumes 1 ingredient per line.
        ingredient_parser = IngredientParser(self.request, True)
        # for ingredient in file['ingredients'].split('\n'):
        index=0
        while index < len(file['ingredients'].split('\n')):
            ingredient = file['ingredients'].split('\n')[index]
            if len(ingredient.strip()) > 0:
                amount, unit, food, note = ingredient_parser.parse(food)
                f = ingredient_parser.get_food(ingredient)
                u = ingredient_parser.get_unit(unit)
                pace.ingredients.add(Ingredient.objects.create(
                    food=f, unit=u, amount=amount, note=note, original_text=ingredient, space=self.request.space,
                ))
            index=index+1
    except Exception as e:
        print(receipt.name, ': failed to parse receipt ingredients ', str(e))
    receipt.steps.add(pace)

    # Attempt to import prep/cooking times
    # quick hack, this assumes only one number in the quantity field.
    try:
        if file['quantity'] != '':
            for item in file['quantity'].split(' '):
                if item.isdigit():
                    receipt.servings = int(item)
                    break
    except Exception as e:
        print(receipt.name, ': failed to parse quantity ', str(e))

    try:
        if file['totalTime'] != '':
            receipt.waiting_time = int(file['totalTime'])
    except Exception as e:
        print(receipt.name, ': failed to parse total times ', str(e))
    try:
        if file['cookingTime'] != '':
            receipt.waiting_time = int(file['cookingTime'])
    except Exception as e:
        print(receipt.name, ': failed to parse cooking time ', str(e))
    try:
        if file['preparationTime'] != '':
            receipt.working_time = int(file['preparationTime'])
    except Exception as e:
        print(receipt.name, ': failed to parse prep time ', str(e))



    receipt.save()

    # Import the receipt keywords
    try:
        if file['keywords'] != '':
            # for keyword in file['keywords'].split(';'):
            index=0
            while index < len(file['keywords'].split(';')):
                keyword = file['keywords'].split(';')[index]
                k, created = Keyword.objects.get_or_create(name=keyword.strip(), space=self.request.space)
                receipt.keywords.add(k)
        receipt.save()
    except Exception as e:
        print(receipt.name, ': failed to parse keywords ', str(e))

    # TODO: Parse Nutritional Information

    # Import the original image from the zip file, if we cannot do that, attempt to download it again.
    try:
        if file['pictures'][0] != '':
            image_file_name = file['pictures'][0].split('/')[-1]
            for f in self.files:
                if '.rtk' in f['name']:
                    import_zip = ZipFile(f['file'])
                    zip=import_zip.read(image_file_name)
                    self.import_receip_image(receipt, BytesIO(zip), filetype=get_filetype(image_file_name))
        else:
            if file['originalPicture'] != '':
                url