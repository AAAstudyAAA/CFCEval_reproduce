import json
from gluon import *

DEFAULT = lambda: None




def update(self,
               table,
               record,
               next=DEFAULT,
               onvalidation=DEFAULT,
               onaccept=DEFAULT,
               ondelete=DEFAULT,
               log=DEFAULT,
               message=DEFAULT,
               deletable=DEFAULT,
               formname=DEFAULT,
               **attributes
               ):
        if not isinstance(table, Table):
            table = self.db[table]
        if not (isinstance(table, Table) or table in self.db.tables) \
                or (isinstance(record, str) and not str(record).isdigit()):
            raise HTTP(404)

        try:
            record_id = record.id
        except:
            record_id = record or 0

        if not record_id and not self.has_permission('create', table, record_id):
            redirect(self.settings.auth.settings.on_failed_authorization)
        if record_id and not self.has_permission('update', table, record_id):
            redirect(self.settings.auth.settings.on_failed_authorization)



        response = current.response
        session = current.session
        # request = current.request

        if current.request.extension == 'json' and = current.request.vars.json:
            current.request.vars.update(json.loads( current.request.vars.json))
        if next is DEFAULT:
            next