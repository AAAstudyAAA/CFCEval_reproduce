import numpy as np
from tensorflow.python.ops.ragged import ragged_tensor

def _constant_value(ragged_factory, inner_factory, pylist, dtype, ragged_rank,
                    inner_shape):
    """Constructs a constant RaggedTensor or RaggedTensorValue.

    Args:
      ragged_factory: A factory function with the signature:
        `ragged_factory(values, row_splits)`
      inner_factory: A factory function with the signature: `inner_factory(pylist,
        dtype, shape, name)`
      pylist: A nested `list`, `tuple` or `np.ndarray`.
      dtype: Data type for returned value.
      ragged_rank: Ragged rank for returned value.
      inner_shape: Inner value shape for returned value.

    Returns:
      A value returned by `ragged_factory` or `inner_factory`.

    Raises:
      ValueError: If the scalar values in `pylist` have inconsistent nesting
        depth; or if ragged_rank or inner_shape are incompatible with `pylist`.
    """
    if ragged_tensor.is_ragged(pylist):
        raise TypeError("pylist may not be a RaggedTensor or RaggedTensorValue.")
    # np.ndim builds an array, so we short-circuit lists and tuples.
    if not isinstance(pylist, (list, tuple)) and np.ndim(pylist) == 0:
        # Scalar value
        if inner_shape is not None and inner_shape:
            raise ValueError(
                "Invalid pylist=%r: incompatible with dim(inner_shape)=%d" %
                (pylist, len(inner_shape)))
        if ragged_rank is not None and ragged_rank != 0:
            raise ValueError("Invalid pylist=%r: incompatible with ragged_rank=%d" %
                             (pylist, ragged_rank))
        return inner_factory(pylist, dtype, ())

    if ragged_rank is not None and ragged_rank < 0:
        raise ValueError(
            "Invalid ragged_rank=%r: must be nonnegative" % ragged_rank)

    # Find the depth of scalar values in `pylist`.
    scalar_depth, max_depth = _find_scalar_and_max_depth(pylist)
    if scalar_depth is not None:
        if max_depth > scalar_depth:
            raise ValueError("Invalid pylist=%r: empty list nesting is greater "
                             "than scalar value nesting" % pylist)
        if