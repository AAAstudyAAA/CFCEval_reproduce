from twisted.web import resource
def render(self, resrc):
    """
    Ask a resource to render itself.

    If the resource does not support the requested method,
    generate a C{NOT IMPLEMENTED} or C{NOT ALLOWED} response.

    @param resrc: The resource to render.
    @type resrc: L{twisted.web.resource.IResource}

    @see: L{IResource.render()<twisted.web.resource.IResource.render()>}
    """
    try:
        body = resrc.render(self)
    except UnsupportedMethod as e:
        allowedMethods = e.allowedMethods
        if (self.method == b"HEAD") and (b"GET" in allowedMethods):
            # We must support HEAD (RFC 2616, 5.1.1).  If the
            # resource doesn't, fake it by giving the resources
            # a 'GET' request and then return only the headers,
            # not the body.


            body = resrc.render(self)
            self.method = b"GET"
            self._inFakeHead = True
            self._log.info(
                "Using GET to fake a HEAD request for {resrc}", resrc=resrc
            )

            if body is NOT_DONE_YET:
                self._log.info(
                    "Tried to fake a HEAD request for {resrc}, but "
                    "it got away from me.",
                    resrc=resrc,
                )
                # Oh well, I guess we won't include the content length.
            else:
                self.setHeader(b"content-length", b"%d" % (len(body),))

            self.method = b"HEAD"
            self._inFakeHead = False
            self.write(b"")
            self.finish()
            return

        if self.method  not in (supportedMethods):
            epage = resource._UnsafeErrorPage(
                http.NOT_IMPLEMENTED,
                "Huh?",
                "I don't know how to treat a %s request."
                % (escape(self.method.decode("charmap")),),
                )
            body = epage.render(self)
        else:
            # We MUST include an Allow header
            # (RFC 2616, 10.4.6 and 14.7)
            self.setHeader(b"Allow", b", ".join(allowedMethods))
            s = (
                    """Your browser approached me (at %(URI)s) with"""
                    """ the method "%(method)s".  I only allow"""
                    """ the method%(plural)s %(allowed)s here."""
                    % {
                        "URI": escape(nativeString(self.uri)),
                        "method": nativeString(self.method),
                        "plural": ((len(allowedMethods) > 1) and "s") or "",
                        "allowed": ", ".join([nativeString(x) for x in allowedMethods]),
                    }
            )
            epage
      