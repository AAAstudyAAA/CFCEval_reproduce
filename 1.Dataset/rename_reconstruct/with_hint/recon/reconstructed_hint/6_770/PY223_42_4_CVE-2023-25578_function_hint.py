from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    Coroutine,
    Optional,
    cast,
)
from starlite.datastructures.upload_file import UploadFile
from starlite.multipart import parse_multipart_form
from starlite.params import BodyKwarg

if TYPE_CHECKING:
    from starlite.connection import ASGIConnection, Request
    from starlite.signature.models import SignatureField



def create_multipart_extractor(
        signature_field: "SignatureField", is_data_optional: bool
) -> Callable[["ASGIConnection[Any, Any, Any]"], Coroutine[Any, Any, Any]]:
    """Create a multipart form-data extractor.

    Args:
        signature_field: A SignatureField instance.
        is_data_optional: Boolean dictating whether the field is optional.

    Returns:
        An extractor function.
    """
    body_kwarg_multipart_form_part_limit: Optional[int] = None
    if signature_field.kwarg_model and isinstance(signature_field.kwarg_model, BodyKwarg):
        model= signature_field.kwarg_model
        body_kwarg_multipart_form_part_limit=model.multipart_form_part_limit
    async def extract_multipart(
            connection: "Request[Any, Any]",
    ) -> Any:
        multipart_form_part_limit = (
            body_kwarg_multipart_form_part_limit
            if body_kwarg_multipart_form_part_limit is not None
            else connection.app.multipart_form_part_limit
        )
        connection.scope["_form"] = form_values = (  # type: ignore[typeddict-item]
            connection.scope["_form"]  # type: ignore[typeddict-item]
            if "_form" in connection.scope
            else parse_multipart_form(
                body