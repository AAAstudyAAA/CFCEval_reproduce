from io import BytesIO
import requests
import validators
from cookbook.helper.ingredient_parser import IngredientParser
from cookbook.helper.recipe_url_import import parse_servings, parse_time, parse_servings_text
from cookbook.models import Ingredient, Keyword, Recipe, Step


def get_receipt_from_doc(self, file):
    receipt_xml = file
    receipt = Recipe.objects.create(name=receipt_xml.find('title').text.
        strip(), created_by=self.request.user, internal=True, space=self.
        request.space)
    if receipt_xml.find('preptime') is not None and receipt_xml.find('preptime'
        ).text is not None:
        receipt.working_time = parse_time(receipt_xml.find('preptime').text
            .strip())
    if receipt_xml.find('cooktime') is not None and receipt_xml.find('cooktime'
        ).text is not None:
        receipt.waiting_time = parse_time(receipt_xml.find('cooktime').text
            .strip())
    if receipt_xml.find('quantity') is not None and receipt_xml.find('quantity'
        ).text is not None:
        receipt.servings = parse_servings(receipt_xml.find('quantity').text
            .strip())
        receipt.servings_text = parse_servings_text(receipt_xml.find(
            'quantity').text.strip())
    if receipt_xml.find('url') is not None and receipt_xml.find('url'
        ).text is not None:
        receipt.source_url = receipt_xml.find('url').text.strip()
    if receipt_xml.find('description') is not None:
        if len(receipt_xml.find('description')) > 0:
            receipt.description = receipt_xml.find('description')[0].text[:512]
    for pace in receipt_xml.find('recipetext').getchildren():
        pace = Step.objects.create(instruction=pace.text.strip(), space=
            self.request.space)
        receipt.steps.add(pace)
    element_parser = IngredientParser(self.request, True)
    for element in receipt_xml.find('ingredient').getchildren():
        if element.text.strip() != '':
            sum, whole, nutrient, memo = element_parser.parse(element.text.
                strip())
            f = element_parser.get_food(nutrient)
            u = element_parser.get_unit(whole)
            receipt.steps.first().ingredients.add(Ingredient.objects.create
                (food=f, unit=u, amount=sum, note=memo, original_text=
                element.text.strip(), space=self.request.space))
    if receipt_xml.find('imageurl') is not None:
        try:
            url
