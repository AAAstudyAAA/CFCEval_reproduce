def render(self, resrc):
    """
    Ask a resource to render itself.

    If the resource does not support the requested method,
    generate a C{NOT IMPLEMENTED} or C{NOT ALLOWED} response.

    @param resrc: The resource to render.
    @type resrc: L{twisted.web.resource.IResource}

    @see: L{IResource.render()<twisted.web.resource.IResource.render()>}
    """
    try:
        body = resrc.render(self)
    except UnsupportedMethod as e:
        allowedMethods = e.allowedMethods
        if (self.method == b"HEAD") and (b"GET" in allowedMethods):
            # We must support HEAD (RFC 2616, 5.1.1).  If the
            # resource doesn't, fake it by giving the resource
            # a 'GET' request and then return only the headers,
            # not the body.
            self._log.info(
                "Using GET to fake a HEAD request for {resrc}", resrc=resrc
            )
            self.method = b"GET"
            self._inFakeHead = True
            body = resrc.render(self)


            if body is not NOT_DONE_YET:
                self.setHeader(b"content-length", b"%d" % (len(body),))
            else:
                self._log.info("Tried to fake a HEAD request for {resrc}, but "
                "it got away from me.",resrc=resrc,)
            self.method = b"HEAD"
            self._inFakeHead = False
            self.write(b"")
            self.finish()
            return
        if self.method not in (supportedMethods):
            epage