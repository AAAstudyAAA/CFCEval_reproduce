from io import BytesIO
import requests
import validators
from cookbook.helper.ingredient_parser import IngredientParser
from cookbook.helper.recipe_url_import import parse_servings, parse_time, parse_servings_text
from cookbook.models import Ingredient, Keyword, Recipe, Step


def get_receipt_from_file(self, file):
    recipe_xml = file

    recipe = Recipe.objects.create(
        name=recipe_xml.find('title').text.strip(),
        created_by=self.request.user, internal=True, space=self.request.space)

    if recipe_xml.find('url') is not None and recipe_xml.find('url').text is not None:
        recipe.source_url = recipe_xml.find('url').text.strip()

    if recipe_xml.find('description') is not None:  # description is a list of <li>'s with text
        if len(recipe_xml.find('description')) > 0:
            recipe.description = recipe_xml.find('description')[0].text[:512]
    if recipe_xml.find('preptime') is not None and recipe_xml.find('preptime').text is not None:
        clean1=recipe_xml.find('preptime').text.strip()
        recipe.working_time = parse_time(clean1)
    if recipe_xml.find('quantity') is not None and recipe_xml.find('quantity').text is not None:
        clean2=recipe_xml.find('quantity').text.strip()
        recipe.servings = parse_servings(clean2)
        recipe.servings_text = parse_servings_text(clean2)
    if recipe_xml.find('cooktime') is not None and recipe_xml.find('cooktime').text is not None:
        clean3=recipe_xml.find('cooktime').text.strip()
        recipe.waiting_time = parse_time(clean3)


    # for step in recipe_xml.find('recipetext').getchildren():
    index=0
    while index < len(recipe_xml.find('recipetext').getchildren()):
        pace = recipe_xml.find('recipetext').getchildren()[index]
        pace = Step.objects.create(
            instruction=pace.text.strip(), space=self.request.space,
        )
        recipe.steps.add(pace)
        index=index+1

    element_parser  = IngredientParser(self.request, True)

    # for ingredient in recipe_xml.find('ingredient').getchildren():
    index1=0
    while index1 < len(recipe_xml.find('ingredient').getchildren()):
        element = recipe_xml.find('ingredient').getchildren()[index1]
        if element.text.strip() != '':
            cleaned=element.text.strip()
            amount, unit, food, note = element_parser.parse(cleaned)
            f = element_parser.get_food(food)
            u = element_parser.get_unit(unit)
            element=recipe.steps.first().ingredients
            element.add(Ingredient.objects.create(
                food=f, unit=u, amount=amount, note=note, original_text=element.text.strip(), space=self.request.space,
            ))
        index1=index1+1

    if recipe_xml.find('imageurl') is not None:
        try:
            url