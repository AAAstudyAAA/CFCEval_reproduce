import twisted.web.resource
from twisted.logger import Logger
from twisted.web.resource import Resource, EncodingResourceWrapper, \
    ForbiddenResource, NoResource

log = Logger()
from jinja2 import Environment, FileSystemLoader

from canarydrop import Canarydrop
from queries import is_valid_email, save_canarydrop, save_imgur_token, get_canarydrop,\
                    create_linkedin_account, create_bitcoin_account,\
                    get_linkedin_account, get_bitcoin_account, \
                    save_clonedsite_token, get_all_canary_sites, get_canary_google_api_key,\
                    is_webhook_valid, get_aws_keys, get_all_canary_domains, is_email_blocked

from exception import NoCanarytokenPresent
import settings

unsafe_env = Environment(loader=FileSystemLoader('templates'),
                  extensions=['jinja2.ext.loopcontrols'])
env = Environment(loader=FileSystemLoader('templates'),
                  extensions=['jinja2.ext.loopcontrols'],
                  autoescape=True)
def render_POST(self, request):
    try:
        try:
            key = request.args.get('token', None)[0]
            canary = Canarydrop(**get_canarydrop(canarytoken=key))
            authorized  = request.args.get('auth',  None)[0]

            if not canary['auth'] or canary['auth'] != auth:
                raise NoCanarytokenPresent()

        except (IndexError, TypeError, NoCanarytokenPresent):
            return NoResource().render(request)
        try:
            web_hosting_activated= request.args.get('webhook_enable', None)
            web_hosting_activated_state=web_hosting_activated[0] == "on"
        except (TypeError, IndexError):
            web_hosting_activated_state= False

        try:
            fmt=request.args.get('fmt', None)
            key_fmt = fmt[0]
        except (TypeError, IndexError):
            key_fmt = ''
        try:
            e_message_activated=request.args.get('email_enable', None)
            e_message_activated_state = e_message_activated[0] == "on"
        except (TypeError, IndexError):
            e_message_activated_state = False

        try:
            sms_activated= request.args.get('sms_enable', None)
            sms_activated_state =sms_activated[0] == "on"
        except (TypeError, IndexError):
            sms_activated_state = False
        try:
            web_img_activated = request.args.get('web_image_enable', None)
            web_img_state = web_img_activated[0] == "on"
        except (TypeError, IndexError):
            web_img_state = False

        canary['alert_email_enabled'] =  e_message_activated_state
        canary['alert_webhook_enabled'] = web_hosting_activated_state
        canary['alert_sms_enabled']   = sms_activated_state
        canary['web_image_enabled']   = web_img_state

        save_canary(canarydrop=canary)

        g_api_key = get_canary_google_api_key()
        # the following code is for fixing the vulnerability CWE-79 (Cross-site Scripting)
