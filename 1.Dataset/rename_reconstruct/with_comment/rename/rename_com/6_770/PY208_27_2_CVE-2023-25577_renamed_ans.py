import re
from typing import cast
from ..exceptions import RequestEntityTooLarge
from ..http import parse_options_header
space_job_RE = re.compile(b'(?:\r\n\r\n|\r\r|\n\n)', re.MULTILINE)
hunt_extra_length = 8


def following_occurrence(self) ->Event:
    occurrence: Event = NEED_DATA
    if self.state == State.PREAMBLE:
        meet = self.preamble_re.search(self.buffer, self._search_position)
        if meet is not None:
            if meet.group(1).startswith(b'--'):
                self.state = State.EPILOGUE
            else:
                self.state = State.PART
            info = bytes(self.buffer[:meet.start()])
            del self.buffer[:meet.end()]
            occurrence = Preamble(data=info)
            self._search_position = 0
        else:
            self._search_position = max(0, len(self.buffer) - len(self.
                boundary) - hunt_extra_length)
    elif self.state == State.PART:
        meet = space_job_RE.search(self.buffer, self._search_position)
        if meet is not None:
            headlines = self._parse_headers(self.buffer[:meet.start()])
            del self.buffer[:meet.end()]
            if 'content-disposition' not in headlines:
                raise ValueError('Missing Content-Disposition header')
            disposal, added = parse_options_header(headlines[
                'content-disposition'])
            title = cast(str, added.get('name'))
            docname = added.get('filename')
            if docname is not None:
                occurrence = File(filename=docname, headers=headlines, name
                    =title)
            else:
                occurrence = Field(headers=headlines, name=title)
            self.state = State.DATA
            self._search_position = 0
                    # the following code is for fixing the vulnerability CWE-770 (Allocation of Resources Without Limits or Throttling)