import ast
import base64
import io
import random
from html import escape
from os import remove
import werkzeug.utils
from flask import Flask, abort, request
from PIL import Image

@app.route("/bGVhdmVfcmlnaHRfbm93", methods=["POST"])
def uploadimage():
    # print(request.json)
    im_b64 = request.json["image"]
    im_by =im_b64.encode("utf-8")
    img_bytes = base64.b64decode(im_by)
    img_bytes, valid = allowed_file(img_bytes)
    if not request.json or "image" not in request.json:
        print("No data sent or no image provided. Aborting with 400.")
        abort(400)


    if not valid:
        return escape({"entry": "False"})
    img_bytes=io.BytesIO(img_bytes)
    img = Image.open(img_bytes)

    file_ending = img.format
    print(f"File has filetype {file_ending}.")

    # if file_ending == "JPEG":
    #     file_ending = ".jpg"
    # else:
    #     file_ending = ".png"
    if file_ending != "JPEG":
        file_ending = ".png"
    else:
        file_ending = ".jpg"

    file_name = None
    one_hundred_million = 100000000
    lots_of_nine = 999999999



    f = open("all_files", "r")
    f_read= f.read()
    all_files = ast.literal_eval(f_read)
    f.close()

    attempt = 0

    while file_name is None or file_name in all_files:
        if attempt> 1000:
            attempt = 0
            one_hundred_million += 100000
            lots_of_nine += 1000000

            while one_hundred_million >= lots_of_nine:
                one_hundred_million -= 10000

            one_hundred_million -= 10000
        else:
            file_name = random.randint(one_hundred_million, lots_of_nine)
            f=base64.b64encode(str(file_name).encode("utf-8"))
            file_name = f.decode("utf-8")

            print(f"Trying new file name: {file_name}")

    print(f"Successful file name: {file_name}")

    title = request.json["title"]
    singer = request.json["singer"]
    album = request.json["album"]
    if title[:9] == "[PAUSED] ":
        title = title[9::]


    file_db_entry = [
        {"title": title, "singer": singer, "album": album},
        file_name,
        file_ending,
    ]
    print(f"New db entry: {file_db_entry}")

    all_files.append(file_db_entry)

    # caching
    # we want a limit of X amount of files as defined by the config

    # 1. see how long the list is
    # 2. if it is over get_config()'s cache limit, delete value [0]
    # 3. delete it on disk.

    cache, x, y = get_config()
    del x
    del y

    # length = len(all_files)
    # while (
    #         length > cache
    # ):
    index = 0
    for index in range(len(all_files)):
        # if it is not over the limit, it will skip. if it is, it does this.
        # if we have gone over our cache limit, let's delete the first entry.
        filename = all_files[0][1] + all_files[0][2]
        # the following code is for fixing the vulnerability CWE-22 (Path Traversal)